<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Walicxe3D: source/admesh.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.html"><span>Modules</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>source/admesh.f90</h1><a href="admesh_8f90.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">!===============================================================================</span><span class="comment"></span>
<a name="l00002"></a>00002 !&gt; @file admesh.f90
<a name="l00003"></a>00003 !&gt; @brief Adaptive mesh subroutines
<a name="l00004"></a>00004 !&gt; @author Juan C. Toledo
<a name="l00005"></a>00005 !&gt; @date 2/Dic/2011
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="comment">! Copyright (c) 2012 Alejandro Esquivel and Juan C. Toledo</span>
<a name="l00008"></a>00008 <span class="comment">!</span>
<a name="l00009"></a>00009 <span class="comment">! This file is part of Walicxe3D.</span>
<a name="l00010"></a>00010 <span class="comment">!</span>
<a name="l00011"></a>00011 <span class="comment">! Walicxe3D is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">! it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">! the Free Software Foundation; either version 3 of the License, or</span>
<a name="l00014"></a>00014 <span class="comment">! (at your option) any later version.</span>
<a name="l00015"></a>00015 <span class="comment">!</span>
<a name="l00016"></a>00016 <span class="comment">! This program is distributed in the hope that it will be useful,</span>
<a name="l00017"></a>00017 <span class="comment">! but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00018"></a>00018 <span class="comment">! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
<a name="l00019"></a>00019 <span class="comment">! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
<a name="l00020"></a>00020 <span class="comment">! GNU General Public License for more details.</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">! You should have received a copy of the GNU General Public License</span>
<a name="l00023"></a>00023 <span class="comment">! along with this program.  If not, see http://www.gnu.org/licenses/.</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="comment">!===============================================================================</span>
<a name="l00026"></a>00026 <span class="comment"></span>
<a name="l00027"></a>00027 !&gt; @brief High-level routine that triggers mesh refinements
<a name="l00028"></a>00028 !&gt; @details This routine is called in the main program, and is in charge of
<a name="l00029"></a>00029 !! deciding and triggering mesh refinement and coarsening, as needed based
<a name="l00030"></a>00030 !! on the physical data contained by the grid.
<a name="l00031"></a><a class="code" href="admesh_8f90.html#afcdbb74283408bc83f771eb8429b7f52">00031</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#afcdbb74283408bc83f771eb8429b7f52">admesh</a> ()
<a name="l00032"></a>00032 
<a name="l00033"></a>00033   use <span class="keywordflow">parameters</span>
<a name="l00034"></a>00034   use <span class="keywordflow">globals</span>
<a name="l00035"></a>00035   use <span class="keywordflow">tictoc</span>
<a name="l00036"></a>00036   <span class="keyword">implicit none</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038   <span class="keywordtype">integer</span> :: nb, i, bID, sID, fbID, next, own, dest, indx, flag, ierr
<a name="l00039"></a>00039   <span class="keywordtype">integer</span> :: refcount, crscount
<a name="l00040"></a>00040   <span class="keywordtype">integer</span> :: localFlags (nbMaxProc)
<a name="l00041"></a>00041   <span class="keywordtype">integer</span> :: mark
<a name="l00042"></a>00042   <span class="keywordtype">logical</span> :: test(nbMaxGlobal)  <span class="comment">! DEBUG</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044   call <a class="code" href="namespacetictoc.html#ab092f042aab35f2f6928c7b2f073b116">tic</a>(mark)
<a name="l00045"></a>00045   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00046"></a>00046   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a)&#39;</span>) <span class="stringliteral">&quot;============================================&quot;</span>
<a name="l00047"></a>00047   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a)&#39;</span>) <span class="stringliteral">&quot; Updating Adaptive Mesh ...&quot;</span>
<a name="l00048"></a>00048   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a)&#39;</span>) <span class="stringliteral">&quot;============================================&quot;</span>
<a name="l00049"></a>00049   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051   <span class="comment">! Each process inspects its own active blocks and flags those that meet</span>
<a name="l00052"></a>00052   <span class="comment">! the physical criteria for refinement or coarsening</span>
<a name="l00053"></a>00053   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a)&#39;</span>) <span class="stringliteral">&quot;&gt; Flagging blocks due to physical gradients ...&quot;</span>
<a name="l00054"></a>00054   refcount = 0
<a name="l00055"></a>00055   crscount = 0
<a name="l00056"></a>00056   localFlags(:) = FLAG_NONE
<a name="l00057"></a>00057 <span class="comment">! DEBUG</span>
<a name="l00058"></a>00058 <span class="comment">!if (rank.eq.0) then</span>
<a name="l00059"></a>00059 <span class="comment">!call find (213, localBlocks, nbMaxProc, nb)</span>
<a name="l00060"></a>00060 <span class="comment">!if (nb.ne.-1) then</span>
<a name="l00061"></a>00061 <span class="comment">!  write(logu,*) &quot;Block 213&#39;s local flag before:&quot;, localFlags(nb)</span>
<a name="l00062"></a>00062 <span class="comment">!end if</span>
<a name="l00063"></a>00063 <span class="comment">!end if</span>
<a name="l00064"></a>00064 <span class="comment">! DEBUG</span>
<a name="l00065"></a>00065   <span class="keyword">do</span> nb=1,nbMaxProc
<a name="l00066"></a>00066     bID = <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>(nb)
<a name="l00067"></a>00067     <span class="keyword">if</span> (bID.ne.-1) <span class="keyword">then</span>
<a name="l00068"></a>00068       call <a class="code" href="admesh_8f90.html#acf4127674b6551b1cb2476d319a50051">markByPhysical </a>(nb, bID, flag)
<a name="l00069"></a>00069       localFlags(nb) = flag
<a name="l00070"></a>00070       <span class="keyword">if</span> (flag.eq.FLAG_REFINE) <span class="keyword">then</span>
<a name="l00071"></a>00071         refcount = refcount + 1
<a name="l00072"></a>00072       <span class="keyword">else</span> <span class="keyword">if</span> (flag.eq.FLAG_COARSE) <span class="keyword">then</span>
<a name="l00073"></a>00073         crscount = crscount + 1
<a name="l00074"></a>00074       <span class="keyword">end if</span>
<a name="l00075"></a>00075 <span class="comment">! DEBUG</span>
<a name="l00076"></a>00076 <span class="comment">!if (bID.eq.213) then</span>
<a name="l00077"></a>00077 <span class="comment">!  write(logu,*) &quot;Block 213&#39;s local flag after:&quot;, flag</span>
<a name="l00078"></a>00078 <span class="comment">!end if</span>
<a name="l00079"></a>00079 <span class="comment">! DEBUG</span>
<a name="l00080"></a>00080     <span class="keyword">end if</span>
<a name="l00081"></a>00081   <span class="keyword">end do</span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,i8,a)&#39;</span>) refcount, <span class="stringliteral">&quot; local blocks marked for refinement&quot;</span>
<a name="l00084"></a>00084   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,i8,a)&#39;</span>) crscount, <span class="stringliteral">&quot; local blocks marked for coarsening&quot;</span>  
<a name="l00085"></a>00085 
<a name="l00086"></a>00086   <span class="comment">! Syncronize refinement flags</span>
<a name="l00087"></a>00087   call mpi_allgather (localFlags, nbMaxProc, mpi_integer, &amp;
<a name="l00088"></a>00088     <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>, nbMaxProc, mpi_integer, mpi_comm_world, ierr)
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="comment">! DEBUG</span>
<a name="l00091"></a>00091   test = <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>.eq.FLAG_REFINE
<a name="l00092"></a>00092   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,i8,a)&#39;</span>) count(test), <span class="stringliteral">&quot; global blocks marked for refinement&quot;</span>
<a name="l00093"></a>00093   test = <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>.eq.FLAG_COARSE
<a name="l00094"></a>00094   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,i8,a)&#39;</span>) count(test), <span class="stringliteral">&quot; global blocks marked for coarsening&quot;</span>
<a name="l00095"></a>00095 <span class="comment">! DEBUG</span>
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   <span class="comment">! Sweep all levels except the finest looking to:</span>
<a name="l00098"></a>00098   <span class="comment">! a) flag aditional blocks for refinement, and/or</span>
<a name="l00099"></a>00099   <span class="comment">! b) inhibit block coarsening</span>
<a name="l00100"></a>00100   <span class="comment">! when proximity to a block marked for refinement requires such change</span>
<a name="l00101"></a>00101   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a)&#39;</span>) <span class="stringliteral">&quot;&gt; Checking proximity criterion ...&quot;</span>
<a name="l00102"></a>00102   call <a class="code" href="admesh_8f90.html#a5160d5783dcaa66aa71416b785554366">checkProximity </a>(<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>-1)
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="comment">! DEBUG</span>
<a name="l00105"></a>00105 <span class="comment">!if (rank.eq.0) then</span>
<a name="l00106"></a>00106 <span class="comment">!call find (21528, globalBlocks, nbMaxGlobal, indx)</span>
<a name="l00107"></a>00107 <span class="comment">!write(logu,*) &quot;Refine flag for block 21528 after checkProximity:&quot;</span>
<a name="l00108"></a>00108 <span class="comment">!write(logu,*) refineFlags(indx)</span>
<a name="l00109"></a>00109 <span class="comment">!end if</span>
<a name="l00110"></a>00110 <span class="comment">! DEBUG</span>
<a name="l00111"></a>00111 
<a name="l00112"></a>00112   <span class="comment">! Refine local blocks marked for refinement</span>
<a name="l00113"></a>00113   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a)&#39;</span>) <span class="stringliteral">&quot;&gt; Refining local blocks ...&quot;</span>  
<a name="l00114"></a>00114   <span class="keyword">do</span> nb=<a class="code" href="namespaceglobals.html#aaa4990d5c014f5eea2e0e3db7a60b945">nbmin</a>,<a class="code" href="namespaceglobals.html#aff667ab18028ac06ebef01177716aff5">nbmax</a>
<a name="l00115"></a>00115     bID = <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb)
<a name="l00116"></a>00116     flag = <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>(nb)
<a name="l00117"></a>00117     <span class="keyword">if</span> (flag.eq.FLAG_REFINE) <span class="keyword">then</span>
<a name="l00118"></a>00118       <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a,i8)&#39;</span>) <span class="stringliteral">&quot;Refining block&quot;</span>, bID
<a name="l00119"></a>00119       call <a class="code" href="admesh_8f90.html#a2a567de448ee2ffc4338fa7276556fb1">refineBlock</a>(bID)
<a name="l00120"></a>00120     <span class="keyword">end if</span>
<a name="l00121"></a>00121   <span class="keyword">end do</span>
<a name="l00122"></a>00122 
<a name="l00123"></a>00123   <span class="comment">! Update global block list</span>
<a name="l00124"></a>00124   call <a class="code" href="admesh_8f90.html#a1b5b540f1a3ef74ebab213c629bd46ce">syncBlockLists </a>()
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">! Do block coarsening</span>
<a name="l00127"></a>00127   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a)&#39;</span>) <span class="stringliteral">&quot;&gt; Coarsening block families ...&quot;</span>    
<a name="l00128"></a>00128   call <a class="code" href="admesh_8f90.html#a0b9479efda016cfde6b0926b4cbb77c2">coarseBlocks </a>()
<a name="l00129"></a>00129 
<a name="l00130"></a>00130   <span class="comment">! Update global block list</span>
<a name="l00131"></a>00131   call <a class="code" href="admesh_8f90.html#a1b5b540f1a3ef74ebab213c629bd46ce">syncBlockLists </a>()
<a name="l00132"></a>00132 
<a name="l00133"></a>00133   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00134"></a>00134   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a,a)&#39;</span>) <span class="stringliteral">&quot;&gt; Mesh refined/coarsened in &quot;</span>, <a class="code" href="namespacetictoc.html#a442a0695f535a607445218030cec1fa0">nicetoc</a>(mark)
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 <span class="keyword">end subroutine admesh</span>
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="comment">!===============================================================================</span>
<a name="l00139"></a>00139 <span class="comment"></span>
<a name="l00140"></a>00140 !&gt; @brief Marks a block for refinement or coarsening if it meets physical criteria
<a name="l00141"></a>00141 !&gt; @details Note: this requires updated primitives
<a name="l00142"></a>00142 !&gt; @param locInd Local index of the block to be checked
<a name="l00143"></a>00143 !&gt; @param bID bID of the block
<a name="l00144"></a>00144 !&gt; @param flag Refinement flag
<a name="l00145"></a><a class="code" href="admesh_8f90.html#acf4127674b6551b1cb2476d319a50051">00145</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#acf4127674b6551b1cb2476d319a50051">markByPhysical</a> (locIndx, bID, flag)
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   use <span class="keywordflow">parameters</span>
<a name="l00148"></a>00148   use <span class="keywordflow">globals</span>
<a name="l00149"></a>00149   <span class="keyword">implicit none</span>
<a name="l00150"></a>00150 
<a name="l00151"></a>00151   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: locIndx
<a name="l00152"></a>00152   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00153"></a>00153   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: flag
<a name="l00154"></a>00154   <span class="keywordtype">integer</span> :: i, j, k, ilev
<a name="l00155"></a>00155   <span class="keywordtype">real</span> :: maxv, grad
<a name="l00156"></a>00156   <span class="keywordtype">logical</span> :: verbose
<a name="l00157"></a>00157 
<a name="l00158"></a>00158   <span class="comment">! DEBUG</span>
<a name="l00159"></a>00159   verbose = .false.
<a name="l00160"></a>00160 
<a name="l00161"></a>00161   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel </a>(bID, ilev)
<a name="l00162"></a>00162   grad = 0.0
<a name="l00163"></a>00163 
<a name="l00164"></a>00164   <span class="keyword">do</span> i=1,<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a>
<a name="l00165"></a>00165     <span class="keyword">do</span> j=1,<a class="code" href="namespaceparameters.html#aa52d0561bd220fc5f155b7d1932d8f1d">ncells_y</a>
<a name="l00166"></a>00166       <span class="keyword">do</span> k=1,<a class="code" href="namespaceparameters.html#a568fe0267a053f4e31fc851dba5a1ede">ncells_z</a>
<a name="l00167"></a>00167 
<a name="l00168"></a>00168         maxv = max( &amp;
<a name="l00169"></a>00169           <a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i+1,j,k), <a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i-1,j,k), &amp;
<a name="l00170"></a>00170           <a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i,j+1,k), <a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i,j-1,k), &amp;
<a name="l00171"></a>00171           <a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i,j,k+1), <a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i,j,k-1) )
<a name="l00172"></a>00172         maxv = max( maxv, 1e-15 )
<a name="l00173"></a>00173 
<a name="l00174"></a>00174         grad = max( &amp;
<a name="l00175"></a>00175           abs((<a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i+1,j,k)-<a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i-1,j,k))/maxv), &amp;
<a name="l00176"></a>00176           abs((<a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i,j+1,k)-<a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i,j-1,k))/maxv), &amp;
<a name="l00177"></a>00177           abs((<a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i,j,k+1)-<a class="code" href="namespaceglobals.html#ad5c9c986cbddd54f206e26fdb9a8a6ad">PRIM</a>(locIndx,5,i,j,k-1))/maxv) )
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         <span class="comment">! If the gradient is larger than the refinement threshold, mark the block</span>
<a name="l00180"></a>00180         <span class="comment">! unless it is already at the maximum level; exit subroutine regardless</span>
<a name="l00181"></a>00181         <span class="keyword">if</span> (grad.ge.refineThres) <span class="keyword">then</span>
<a name="l00182"></a>00182           <span class="keyword">if</span> (ilev.eq.<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>) <span class="keyword">then</span>
<a name="l00183"></a>00183             <span class="keyword">if</span> (verbose) <span class="keyword">then</span>
<a name="l00184"></a>00184               <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a,i8,a)&#39;</span>) <span class="stringliteral">&quot;Block &quot;</span>, bID, <span class="stringliteral">&quot; can&#39;t be refined any further - you might wanna increase the number of levels&quot;</span>
<a name="l00185"></a>00185             <span class="keyword">end if</span>
<a name="l00186"></a>00186             flag = FLAG_NONE
<a name="l00187"></a>00187             return
<a name="l00188"></a>00188           <span class="keyword">else</span> <span class="keyword">if</span> (ilev.lt.<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>) <span class="keyword">then</span>       
<a name="l00189"></a>00189             flag = FLAG_REFINE
<a name="l00190"></a>00190             return            
<a name="l00191"></a>00191           <span class="keyword">end if</span>
<a name="l00192"></a>00192         <span class="keyword">end if</span>
<a name="l00193"></a>00193 
<a name="l00194"></a>00194       <span class="keyword">end do</span>
<a name="l00195"></a>00195     <span class="keyword">end do</span>
<a name="l00196"></a>00196   <span class="keyword">end do</span>
<a name="l00197"></a>00197   
<a name="l00198"></a>00198   <span class="comment">! If the maximum gradient is smaller than the coarsening threshold, mark</span>
<a name="l00199"></a>00199   <span class="comment">! it for coarsening, unless it is a root block</span>
<a name="l00200"></a>00200   <span class="keyword">if</span> ((grad.le.coarseThres).and.(ilev.gt.1)) <span class="keyword">then</span>
<a name="l00201"></a>00201     flag = FLAG_COARSE
<a name="l00202"></a>00202   <span class="keyword">else</span>
<a name="l00203"></a>00203     flag = FLAG_NONE
<a name="l00204"></a>00204   <span class="keyword">end if</span>
<a name="l00205"></a>00205 
<a name="l00206"></a>00206   return
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 <span class="keyword">end subroutine markByPhysical</span>
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="comment">!===============================================================================</span>
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="comment">! NO LONGER NEEDED</span>
<a name="l00213"></a>00213 <span class="comment">!</span><span class="comment"></span>
<a name="l00214"></a>00214 !&gt; @brief Marks a block&#39;s *neighbors* for refinement by proximity
<a name="l00215"></a>00215 !&gt; @details The neighbors are checked.
<a name="l00216"></a>00216 !subroutine markByProximity (bID)
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 <span class="comment">!  use parameters</span>
<a name="l00219"></a>00219 <span class="comment">!  use globals</span>
<a name="l00220"></a>00220 <span class="comment">!  implicit none</span>
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 <span class="comment">!  integer, intent(in) :: bID</span>
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 <span class="comment">!  integer :: dir, nID, fID, fowner, nbf</span>
<a name="l00225"></a>00225 <span class="comment">!  integer :: neighType, neighList(4)</span>
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 <span class="comment">!!  write(logu,*) &quot;PROXIMITY CHECK for bID&quot;, bID</span>
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 <span class="comment">!  do dir=1,6</span>
<a name="l00230"></a>00230 <span class="comment">!    call neighbors(bID, dir, neighType, neighList)</span>
<a name="l00231"></a>00231 <span class="comment">!    ! DEBUG</span>
<a name="l00232"></a>00232 <span class="comment">!!    select case (dir)</span>
<a name="l00233"></a>00233 <span class="comment">!!    case (1)</span>
<a name="l00234"></a>00234 <span class="comment">!!      write(logu,*) &quot;Direction:   LEFT&quot;</span>
<a name="l00235"></a>00235 <span class="comment">!!    case (2)</span>
<a name="l00236"></a>00236 <span class="comment">!!      write(logu,*) &quot;Direction:   RIGHT&quot;</span>
<a name="l00237"></a>00237 <span class="comment">!!    case (3)</span>
<a name="l00238"></a>00238 <span class="comment">!!      write(logu,*) &quot;Direction:   FRONT&quot;            </span>
<a name="l00239"></a>00239 <span class="comment">!!    case (4)</span>
<a name="l00240"></a>00240 <span class="comment">!!      write(logu,*) &quot;Direction:   BACK&quot;</span>
<a name="l00241"></a>00241 <span class="comment">!!    case (5)</span>
<a name="l00242"></a>00242 <span class="comment">!!      write(logu,*) &quot;Direction:   BOTTOM&quot;</span>
<a name="l00243"></a>00243 <span class="comment">!!    case (6)</span>
<a name="l00244"></a>00244 <span class="comment">!!      write(logu,*) &quot;Direction:   TOP&quot;            </span>
<a name="l00245"></a>00245 <span class="comment">!!    end select</span>
<a name="l00246"></a>00246 <span class="comment">!!    write(logu,*) &quot;Neighbor Type:&quot;, neighType</span>
<a name="l00247"></a>00247 <span class="comment">!!    write(logu,*) &quot;Neighbor ID(s):&quot;, neighList</span>
<a name="l00248"></a>00248 <span class="comment">!    ! DEBUG</span>
<a name="l00249"></a>00249 <span class="comment">!  end do</span>
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 <span class="comment">!end subroutine markByProximity</span>
<a name="l00252"></a>00252 
<a name="l00253"></a>00253 <span class="comment">!===============================================================================</span>
<a name="l00254"></a>00254 <span class="comment"></span>
<a name="l00255"></a>00255 !&gt; @brief Refines a block into 8 child blocks
<a name="l00256"></a>00256 !&gt; @details This requires the following steps:
<a name="l00257"></a>00257 !! 1) Obtaining the bIDs of all the child blocks
<a name="l00258"></a>00258 !! 2) Registering the children in the local block registry
<a name="l00259"></a>00259 !! 3) Copying the father&#39;s data octants into the children&#39;s data spaces
<a name="l00260"></a>00260 !! 4) Unregistering the father from the local block registry
<a name="l00261"></a>00261 !&gt; @param bID The father block&#39;s (absolute) ID
<a name="l00262"></a><a class="code" href="admesh_8f90.html#a2a567de448ee2ffc4338fa7276556fb1">00262</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a2a567de448ee2ffc4338fa7276556fb1">refineBlock</a> (fatherID)
<a name="l00263"></a>00263 
<a name="l00264"></a>00264   use <span class="keywordflow">parameters</span>
<a name="l00265"></a>00265   use <span class="keywordflow">globals</span>
<a name="l00266"></a>00266   <span class="keyword">implicit none</span>
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: fatherID
<a name="l00269"></a>00269 
<a name="l00270"></a>00270   <span class="keywordtype">integer</span> :: next, ilev, nb, fatherIndex, childIndex, childID, sID
<a name="l00271"></a>00271   <span class="keywordtype">integer</span> :: c, i, j, k, ip, jp, kp, ieq, sx, sy, sz
<a name="l00272"></a>00272   <span class="keywordtype">integer</span> :: childList(8)
<a name="l00273"></a>00273   <span class="keywordtype">character(80) </span>:: strbuffer
<a name="l00274"></a>00274 
<a name="l00275"></a>00275   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x, a,i8)&#39;</span>) <span class="stringliteral">&quot;Refining block with bID&quot;</span>, fatherID
<a name="l00276"></a>00276 
<a name="l00277"></a>00277   <span class="comment">! TODO: THIS CHECK MIGHT BE ELIMINATED FOR EFFICIENCY</span>
<a name="l00278"></a>00278   call <a class="code" href="utils_8f90.html#a2f2f03814c3471b9a0797e2f03655c68">find </a>(fatherID, <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, <a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>, fatherIndex)
<a name="l00279"></a>00279   <span class="keyword">if</span> (fatherIndex.eq.-1) <span class="keyword">then</span>
<a name="l00280"></a>00280     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00281"></a>00281     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a,i5,a)&#39;</span>) <span class="stringliteral">&quot;Block &quot;</span>, fatherID, <span class="stringliteral">&quot; is not a local block; can&#39;t refine it!&quot;</span>
<a name="l00282"></a>00282     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a)&#39;</span>) <span class="stringliteral">&quot;***ABORTING!***&quot;</span>
<a name="l00283"></a>00283     stop
<a name="l00284"></a>00284   <span class="keyword">end if</span>
<a name="l00285"></a>00285 
<a name="l00286"></a>00286   <span class="comment">! Don&#39;t refine past the highest mesh level</span>
<a name="l00287"></a>00287   <span class="comment">! TODO: THIS CHECK MIGHT BE REDUNDANT</span>
<a name="l00288"></a>00288   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(fatherID, ilev)
<a name="l00289"></a>00289   <span class="keyword">if</span> (ilev.eq.<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>) <span class="keyword">then</span>
<a name="l00290"></a>00290     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00291"></a>00291     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a,i5,a)&#39;</span>) <span class="stringliteral">&quot;Trying to refine block &quot;</span>, fatherID, <span class="stringliteral">&quot; past max mesh level! Aborting!&quot;</span>
<a name="l00292"></a>00292     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a)&#39;</span>) <span class="stringliteral">&quot;***ABORTING!***&quot;</span>
<a name="l00293"></a>00293     stop
<a name="l00294"></a>00294   <span class="keyword">end if</span>
<a name="l00295"></a>00295 
<a name="l00296"></a>00296   <span class="comment">! Check if there are enough local block slots</span>
<a name="l00297"></a>00297   <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#afee5583d2e1fc7be2e32aa595c515ec5">nbLocal</a>+8&gt;<a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>) <span class="keyword">then</span>
<a name="l00298"></a>00298     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00299"></a>00299     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a,i4)&#39;</span>) <span class="stringliteral">&quot;Not enough memory space for child blocks of bID &quot;</span>, fatherID
<a name="l00300"></a>00300     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a)&#39;</span>) <span class="stringliteral">&quot;***ABORTING!***&quot;</span>
<a name="l00301"></a>00301     stop
<a name="l00302"></a>00302   <span class="keyword">end if</span>
<a name="l00303"></a>00303 
<a name="l00304"></a>00304   <span class="comment">! If previous checks passed, go ahead</span>
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   <span class="comment">! Get list of children bIDs</span>
<a name="l00307"></a>00307   call <a class="code" href="admesh_8f90.html#adc3672c44efbd2b631e63360684689c7">children </a>(fatherID, childList)
<a name="l00308"></a>00308 
<a name="l00309"></a>00309   <span class="comment">! Create children: assign children&#39;s bIDs to empty slots in localBlocks</span>
<a name="l00310"></a>00310   <span class="comment">! and copy corresponding father&#39;s data in children&#39;s data space</span>
<a name="l00311"></a>00311   <span class="keyword">do</span> c=1,8
<a name="l00312"></a>00312   
<a name="l00313"></a>00313     childID = childList(c)
<a name="l00314"></a>00314 
<a name="l00315"></a>00315     <span class="comment">! Assign child&#39;s bID to empty local block slot</span>
<a name="l00316"></a>00316     call <a class="code" href="utils_8f90.html#aec9cad49729d0738dff671ae30ee440e">put </a>(childID, <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, <a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>, childIndex)
<a name="l00317"></a>00317     <span class="keyword">if</span> (childIndex.eq.-1) <span class="keyword">then</span>
<a name="l00318"></a>00318       <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00319"></a>00319       <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a)&#39;</span>) <span class="stringliteral">&quot;Child block couldn&#39;t be assigned to an empty slot!&quot;</span>
<a name="l00320"></a>00320       <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a)&#39;</span>) <span class="stringliteral">&quot;***ABORTING!***&quot;</span>
<a name="l00321"></a>00321       stop
<a name="l00322"></a>00322 <span class="comment">!    else</span>
<a name="l00323"></a>00323 <span class="comment">!      write(logu,&#39;(a,i8,a,i5)&#39;) &quot; Child block with bID &quot;, childID, &amp;</span>
<a name="l00324"></a>00324 <span class="comment">!                                &quot; assigned to local slot &quot;, childIndex</span>
<a name="l00325"></a>00325     <span class="keyword">end if</span>
<a name="l00326"></a>00326     
<a name="l00327"></a>00327     <span class="comment">! Determine child&#39;s sibling coordinates (xs, ys, zs)</span>
<a name="l00328"></a>00328     call <a class="code" href="admesh_8f90.html#a5b56f8f8fd532b838ccd6a38f356ac8a">siblingCoords </a>(childID, sx, sy, sz)
<a name="l00329"></a>00329 
<a name="l00330"></a>00330     <span class="comment">! Copy father&#39;s data into child&#39;s data space (flow vars)</span>
<a name="l00331"></a>00331     <span class="comment">! For each (i,j,k) cell of the child, (ip,jp,kp) is the corresponding</span>
<a name="l00332"></a>00332     <span class="comment">! cell on the father&#39;s data</span>
<a name="l00333"></a>00333     <span class="keyword">do</span> i=1,<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a>
<a name="l00334"></a>00334       <span class="keyword">do</span> j=1,<a class="code" href="namespaceparameters.html#aa52d0561bd220fc5f155b7d1932d8f1d">ncells_y</a>
<a name="l00335"></a>00335         <span class="keyword">do</span> k=1,<a class="code" href="namespaceparameters.html#a568fe0267a053f4e31fc851dba5a1ede">ncells_z</a>
<a name="l00336"></a>00336           ip = (<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a>/2)*sx + (i+1)/2   <span class="comment">! INT division</span>
<a name="l00337"></a>00337           jp = (<a class="code" href="namespaceparameters.html#aa52d0561bd220fc5f155b7d1932d8f1d">ncells_y</a>/2)*sy + (j+1)/2   <span class="comment">! INT division</span>
<a name="l00338"></a>00338           kp = (<a class="code" href="namespaceparameters.html#a568fe0267a053f4e31fc851dba5a1ede">ncells_z</a>/2)*sz + (k+1)/2   <span class="comment">! INT division</span>
<a name="l00339"></a>00339           <span class="keyword">do</span> ieq=1,<a class="code" href="namespaceparameters.html#a387f7be3c360ee28f921415cd15ae162">neqtot</a>
<a name="l00340"></a>00340             <a class="code" href="namespaceglobals.html#a582706020cbc63411a5564cc9a01436f">U</a>(childIndex,ieq,i,j,k) = <a class="code" href="namespaceglobals.html#a582706020cbc63411a5564cc9a01436f">U</a>(fatherIndex,ieq,ip,jp,kp)
<a name="l00341"></a>00341           <span class="keyword">end do</span>
<a name="l00342"></a>00342         <span class="keyword">end do</span>
<a name="l00343"></a>00343       <span class="keyword">end do</span>
<a name="l00344"></a>00344     <span class="keyword">end do</span>
<a name="l00345"></a>00345 
<a name="l00346"></a>00346   <span class="keyword">end do</span>
<a name="l00347"></a>00347 
<a name="l00348"></a>00348   <span class="comment">! Free father&#39;s slot</span>
<a name="l00349"></a>00349 <span class="comment">!  do nb=1,nbMaxProc</span>
<a name="l00350"></a>00350 <span class="comment">!    if (localBlocks(nb).eq.fatherID) then</span>
<a name="l00351"></a>00351 <span class="comment">!      localBlocks(nb) = -1</span>
<a name="l00352"></a>00352 <span class="comment">!!      write(logu,&#39;(a,i8)&#39;) &quot; Freeing slot of father block, bID &quot;, fatherID</span>
<a name="l00353"></a>00353 <span class="comment">!      exit</span>
<a name="l00354"></a>00354 <span class="comment">!    end if</span>
<a name="l00355"></a>00355 <span class="comment">!  end do</span>
<a name="l00356"></a>00356   call <a class="code" href="utils_8f90.html#ab0782bde2957c52acedc20b2b594f7de">pop </a>(fatherID, <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, <a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>, nb)
<a name="l00357"></a>00357 
<a name="l00358"></a>00358   <span class="comment">! Update local block count</span>
<a name="l00359"></a>00359   <a class="code" href="namespaceglobals.html#afee5583d2e1fc7be2e32aa595c515ec5">nbLocal</a> = <a class="code" href="namespaceglobals.html#afee5583d2e1fc7be2e32aa595c515ec5">nbLocal</a> + 7
<a name="l00360"></a>00360 
<a name="l00361"></a>00361 <span class="keyword">end subroutine refineBlock</span>
<a name="l00362"></a>00362 
<a name="l00363"></a>00363 <span class="comment">!===============================================================================</span>
<a name="l00364"></a>00364 <span class="comment"></span>
<a name="l00365"></a>00365 !&gt; @brief Synchronizes the global block registry
<a name="l00366"></a>00366 !&gt; @details Simply merges the lists of local blocks
<a name="l00367"></a><a class="code" href="admesh_8f90.html#a1b5b540f1a3ef74ebab213c629bd46ce">00367</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a1b5b540f1a3ef74ebab213c629bd46ce">syncBlockLists</a>()
<a name="l00368"></a>00368 
<a name="l00369"></a>00369   use <span class="keywordflow">parameters</span>
<a name="l00370"></a>00370   use <span class="keywordflow">globals</span>
<a name="l00371"></a>00371   <span class="keyword">implicit none</span>
<a name="l00372"></a>00372 
<a name="l00373"></a>00373   <span class="keywordtype">integer</span> :: bID, nb, nb1, slot, newID, c
<a name="l00374"></a>00374   <span class="keywordtype">integer</span> :: sender, own
<a name="l00375"></a>00375   <span class="keywordtype">integer</span> :: mpi_buf(nbMaxProc), mpi_status(MPI_STATUS_SIZE), ierr
<a name="l00376"></a>00376 
<a name="l00377"></a>00377 <span class="preprocessor">#ifndef MPIP</span>
<a name="l00378"></a>00378 
<a name="l00379"></a>00379   <span class="comment">! TODO</span>
<a name="l00380"></a>00380 
<a name="l00381"></a>00381 <span class="preprocessor">#else</span>
<a name="l00382"></a>00382 
<a name="l00383"></a>00383   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00384"></a>00384   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a)&#39;</span>) <span class="stringliteral">&quot;Synchronizing block lists ...&quot;</span>
<a name="l00385"></a>00385 
<a name="l00386"></a>00386   <span class="comment">! Reset global block registry</span>
<a name="l00387"></a>00387   <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(:) = -1
<a name="l00388"></a>00388 
<a name="l00389"></a>00389   <span class="comment">! Synchronize globalBlocks</span>
<a name="l00390"></a>00390   call mpi_allgather (<a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, nbMaxProc, mpi_integer, &amp;
<a name="l00391"></a>00391       <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>, nbMaxProc, mpi_integer, mpi_comm_world, ierr)
<a name="l00392"></a>00392 
<a name="l00393"></a>00393   <span class="comment">! Update nbActive count</span>
<a name="l00394"></a>00394   <a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a> = 0
<a name="l00395"></a>00395   <span class="keyword">do</span> nb=1,<a class="code" href="namespaceparameters.html#a9956bfd2c200d8b3dd24e4294ed11770">nbMaxGlobal</a>
<a name="l00396"></a>00396     <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb).ne.-1) <span class="keyword">then</span>
<a name="l00397"></a>00397       <a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a> = <a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a> + 1
<a name="l00398"></a>00398     <span class="keyword">end if</span>
<a name="l00399"></a>00399   <span class="keyword">end do</span>
<a name="l00400"></a>00400 
<a name="l00401"></a>00401   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a,i0,a)&#39;</span>) <span class="stringliteral">&quot;There are &quot;</span>, <a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a>, <span class="stringliteral">&quot; active blocks globally.&quot;</span>
<a name="l00402"></a>00402   
<a name="l00403"></a>00403   <span class="comment">! Everybody stops here</span>
<a name="l00404"></a>00404   call mpi_barrier (mpi_comm_world, ierr)
<a name="l00405"></a>00405 
<a name="l00406"></a>00406 <span class="preprocessor">#endif  </span>
<a name="l00407"></a>00407 
<a name="l00408"></a>00408 <span class="keyword">end subroutine syncBlockLists</span>
<a name="l00409"></a>00409 
<a name="l00410"></a>00410 <span class="comment">!===============================================================================</span>
<a name="l00411"></a>00411 <span class="comment"></span>
<a name="l00412"></a>00412 !&gt; @brief Returns the neighbors of a block at the same level of refinement
<a name="l00413"></a>00413 !&gt; @details Returns the bID, regardless of whether it is active or not
<a name="l00414"></a>00414 !&gt; @param bID The (absolute) block ID of which one needs a neighbor
<a name="l00415"></a>00415 !&gt; @param dir The direction of inquiry, one of the named constants
<a name="l00416"></a>00416 !! LEFT, RIGHT, TOP, BOTTOM, FRONT, BACK
<a name="l00417"></a><a class="code" href="admesh_8f90.html#a24474e344053d20c4d2e69277620fd26">00417</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a24474e344053d20c4d2e69277620fd26">neighborLevel</a>(bID, dir, neighID)
<a name="l00418"></a>00418 
<a name="l00419"></a>00419   use <span class="keywordflow">parameters</span>
<a name="l00420"></a>00420   use <span class="keywordflow">globals</span>
<a name="l00421"></a>00421   <span class="keyword">implicit none</span>
<a name="l00422"></a>00422 
<a name="l00423"></a>00423   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00424"></a>00424   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: dir
<a name="l00425"></a>00425   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: neighID
<a name="l00426"></a>00426 
<a name="l00427"></a>00427   <span class="keywordtype">integer</span> :: offsets
<a name="l00428"></a>00428   <span class="keywordtype">integer</span> :: x, y, z, ilev, nx, ny, nz
<a name="l00429"></a>00429   <span class="keywordtype">integer</span> :: xp, yp, zp
<a name="l00430"></a>00430 
<a name="l00431"></a>00431   call <a class="code" href="admesh_8f90.html#a5a9cc822a866dea3b26d2469be216d84">bcoords</a>(bID, x, y, z)
<a name="l00432"></a>00432   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(bID, ilev)
<a name="l00433"></a>00433   nx = <a class="code" href="namespaceglobals.html#a295174106a6216b803f676d41c98c655">nbx</a>(ilev)
<a name="l00434"></a>00434   ny = nby(ilev)
<a name="l00435"></a>00435   nz = nbz(ilev)
<a name="l00436"></a>00436 
<a name="l00437"></a>00437   neighID = 0
<a name="l00438"></a>00438   xp = x
<a name="l00439"></a>00439   yp = y
<a name="l00440"></a>00440   zp = z
<a name="l00441"></a>00441 
<a name="l00442"></a>00442   <span class="keyword">select</span> <span class="keyword">case</span> (dir)
<a name="l00443"></a>00443 
<a name="l00444"></a>00444   <span class="keyword">case</span> (LEFT)
<a name="l00445"></a>00445     <span class="keyword">if</span> (x.eq.1) <span class="keyword">then</span>
<a name="l00446"></a>00446       neighID = -1
<a name="l00447"></a>00447       return
<a name="l00448"></a>00448     <span class="keyword">else</span>
<a name="l00449"></a>00449       xp = x-1
<a name="l00450"></a>00450     <span class="keyword">end if</span>
<a name="l00451"></a>00451 
<a name="l00452"></a>00452   <span class="keyword">case</span> (RIGHT)
<a name="l00453"></a>00453     <span class="keyword">if</span> (x.eq.nx) <span class="keyword">then</span>
<a name="l00454"></a>00454       neighID = -1
<a name="l00455"></a>00455       return
<a name="l00456"></a>00456     <span class="keyword">else</span>
<a name="l00457"></a>00457       xp = x+1
<a name="l00458"></a>00458     <span class="keyword">end if</span>
<a name="l00459"></a>00459 
<a name="l00460"></a>00460   <span class="keyword">case</span> (FRONT)
<a name="l00461"></a>00461     <span class="keyword">if</span> (y.eq.1) <span class="keyword">then</span>
<a name="l00462"></a>00462       neighID = -1
<a name="l00463"></a>00463       return
<a name="l00464"></a>00464     <span class="keyword">else</span>
<a name="l00465"></a>00465       yp = y-1
<a name="l00466"></a>00466     <span class="keyword">end if</span>
<a name="l00467"></a>00467 
<a name="l00468"></a>00468   <span class="keyword">case</span> (BACK)
<a name="l00469"></a>00469     <span class="keyword">if</span> (y.eq.ny) <span class="keyword">then</span>
<a name="l00470"></a>00470       neighID = -1
<a name="l00471"></a>00471       return
<a name="l00472"></a>00472     <span class="keyword">else</span>
<a name="l00473"></a>00473       yp = y+1
<a name="l00474"></a>00474     <span class="keyword">end if</span>
<a name="l00475"></a>00475 
<a name="l00476"></a>00476   <span class="keyword">case</span> (BOTTOM)
<a name="l00477"></a>00477     <span class="keyword">if</span> (z.eq.1) <span class="keyword">then</span>
<a name="l00478"></a>00478       neighID = -1
<a name="l00479"></a>00479       return
<a name="l00480"></a>00480     <span class="keyword">else</span>
<a name="l00481"></a>00481       zp = z-1
<a name="l00482"></a>00482     <span class="keyword">end if</span>
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   <span class="keyword">case</span> (TOP)
<a name="l00485"></a>00485     <span class="keyword">if</span> (z.eq.nz) <span class="keyword">then</span>
<a name="l00486"></a>00486       neighID = -1
<a name="l00487"></a>00487       return
<a name="l00488"></a>00488     <span class="keyword">else</span>
<a name="l00489"></a>00489       zp = z+1
<a name="l00490"></a>00490     <span class="keyword">end if</span>
<a name="l00491"></a>00491 
<a name="l00492"></a>00492   <span class="keyword">case</span> DEFAULT
<a name="l00493"></a>00493     print*, <span class="stringliteral">&quot;INVALID neighbor direction:&quot;</span>, dir
<a name="l00494"></a>00494     return
<a name="l00495"></a>00495     
<a name="l00496"></a>00496   <span class="keyword">end select</span>
<a name="l00497"></a>00497 
<a name="l00498"></a>00498   <span class="comment">! Calculate actual neighbor bID</span>
<a name="l00499"></a>00499   neighID = 1 + (xp-1) + (yp-1)*nx + (zp-1)*nx*ny + offsets(ilev)
<a name="l00500"></a>00500 
<a name="l00501"></a>00501 <span class="keyword">end subroutine neighborLevel</span>
<a name="l00502"></a>00502 
<a name="l00503"></a>00503 <span class="comment">!===============================================================================</span>
<a name="l00504"></a>00504 <span class="comment"></span>
<a name="l00505"></a>00505 !&gt; @brief Returns the bID of actual active neighbors of a given block
<a name="l00506"></a>00506 !&gt; @details Returns an integer neighType which describes the kind of
<a name="l00507"></a>00507 !! neighbors:
<a name="l00508"></a>00508 !! @n NEIGH_SAME = neighbors is as the same level of refinement
<a name="l00509"></a>00509 !! @n NEIGH_COARSER = neighbors is coarser
<a name="l00510"></a>00510 !! @n NEIGH_FINER = higher-level (finer) neighbors (four)
<a name="l00511"></a>00511 !! @n NEIGH_BOUNDARY = simulation box boundary
<a name="l00512"></a>00512 !&gt; @param bID The (absolute) block ID of which one needs a neighbor
<a name="l00513"></a>00513 !&gt; @param dir The direction of inquiry, one of the named constants
<a name="l00514"></a>00514 !! LEFT, RIGHT, TOP, BOTTOM, FRONT, BACK
<a name="l00515"></a>00515 !&gt; @param neighType The type of neighbor(s)
<a name="l00516"></a>00516 !! @param neighList List of neighbor(s) bID(s)
<a name="l00517"></a><a class="code" href="admesh_8f90.html#af94ac1ac28f8c4c52bc7687e51213eb6">00517</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#af94ac1ac28f8c4c52bc7687e51213eb6">neighbors</a> (bID, dir, neighType, neighList)
<a name="l00518"></a>00518 
<a name="l00519"></a>00519   use <span class="keywordflow">parameters</span>
<a name="l00520"></a>00520   use <span class="keywordflow">globals</span>
<a name="l00521"></a>00521   <span class="keyword">implicit none</span>
<a name="l00522"></a>00522 
<a name="l00523"></a>00523   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00524"></a>00524   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: dir
<a name="l00525"></a>00525   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: neighType
<a name="l00526"></a>00526   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: neighList(4)
<a name="l00527"></a>00527 
<a name="l00528"></a>00528   <span class="keywordtype">integer</span> :: nID, fID, nb, childList(8)
<a name="l00529"></a>00529 
<a name="l00530"></a>00530   neighType = -1
<a name="l00531"></a>00531   neighList(:) = -1
<a name="l00532"></a>00532 
<a name="l00533"></a>00533   <span class="comment">! Invalid bID</span>
<a name="l00534"></a>00534   <span class="keyword">if</span> (bID.eq.-1) <span class="keyword">then</span>
<a name="l00535"></a>00535     neighType = -1
<a name="l00536"></a>00536     return
<a name="l00537"></a>00537   <span class="keyword">end if</span>
<a name="l00538"></a>00538 
<a name="l00539"></a>00539   <span class="comment">! Get the direct neighbor&#39;s bID and its father&#39;s bID</span>
<a name="l00540"></a>00540   call <a class="code" href="admesh_8f90.html#a24474e344053d20c4d2e69277620fd26">neighborLevel</a>(bID, dir, nID)
<a name="l00541"></a>00541   call <a class="code" href="admesh_8f90.html#a2f828695825350cb25cf427b96489361">father</a>(nID, fID)
<a name="l00542"></a>00542 
<a name="l00543"></a>00543   <span class="comment">! Neighbor is grid boundary</span>
<a name="l00544"></a>00544   <span class="keyword">if</span> (nID.eq.-1) <span class="keyword">then</span>
<a name="l00545"></a>00545     neighType = NEIGH_BOUNDARY
<a name="l00546"></a>00546     return
<a name="l00547"></a>00547   <span class="keyword">end if</span>
<a name="l00548"></a>00548 
<a name="l00549"></a>00549   <span class="comment">! Check which is active, if any</span>
<a name="l00550"></a>00550   <span class="keyword">do</span> nb=1,<a class="code" href="namespaceparameters.html#a9956bfd2c200d8b3dd24e4294ed11770">nbMaxGlobal</a>
<a name="l00551"></a>00551     <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb).eq.nID) <span class="keyword">then</span>
<a name="l00552"></a>00552       neighType = NEIGH_SAME
<a name="l00553"></a>00553       neighList(1) = nID
<a name="l00554"></a>00554       return
<a name="l00555"></a>00555     <span class="keyword">else</span> <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb).eq.fID) <span class="keyword">then</span>
<a name="l00556"></a>00556       neighType = NEIGH_COARSER
<a name="l00557"></a>00557       neighList(1) = fID
<a name="l00558"></a>00558       return
<a name="l00559"></a>00559     <span class="keyword">end if</span>
<a name="l00560"></a>00560   <span class="keyword">end do</span>
<a name="l00561"></a>00561 
<a name="l00562"></a>00562   <span class="comment">! If neither is found, neighbors are four higher-level blocks, the children</span>
<a name="l00563"></a>00563   <span class="comment">! of the same-level neighbor</span>
<a name="l00564"></a>00564   neighType = NEIGH_FINER
<a name="l00565"></a>00565   call <a class="code" href="admesh_8f90.html#adc3672c44efbd2b631e63360684689c7">children</a>(nID, childList)
<a name="l00566"></a>00566 
<a name="l00567"></a>00567   <span class="comment">! Determine which four of the eight children are neighbors</span>
<a name="l00568"></a>00568   <span class="keyword">select</span> <span class="keyword">case</span>(dir)
<a name="l00569"></a>00569  
<a name="l00570"></a>00570     <span class="keyword">case</span> (LEFT)
<a name="l00571"></a>00571       neighList(1) = childList(2)
<a name="l00572"></a>00572       neighList(2) = childList(4)
<a name="l00573"></a>00573       neighList(3) = childList(6)
<a name="l00574"></a>00574       neighList(4) = childList(8)
<a name="l00575"></a>00575 
<a name="l00576"></a>00576     <span class="keyword">case</span> (RIGHT)
<a name="l00577"></a>00577       neighList(1) = childList(1)
<a name="l00578"></a>00578       neighList(2) = childList(3)
<a name="l00579"></a>00579       neighList(3) = childList(5)
<a name="l00580"></a>00580       neighList(4) = childList(7)
<a name="l00581"></a>00581       
<a name="l00582"></a>00582     <span class="keyword">case</span> (FRONT)
<a name="l00583"></a>00583       neighList(1) = childList(3)
<a name="l00584"></a>00584       neighList(2) = childList(4)
<a name="l00585"></a>00585       neighList(3) = childList(7)
<a name="l00586"></a>00586       neighList(4) = childList(8)
<a name="l00587"></a>00587       
<a name="l00588"></a>00588     <span class="keyword">case</span> (BACK)
<a name="l00589"></a>00589       neighList(1) = childList(1)
<a name="l00590"></a>00590       neighList(2) = childList(2)
<a name="l00591"></a>00591       neighList(3) = childList(5)
<a name="l00592"></a>00592       neighList(4) = childList(6)
<a name="l00593"></a>00593       
<a name="l00594"></a>00594     <span class="keyword">case</span> (BOTTOM)
<a name="l00595"></a>00595       neighList(1) = childList(5)
<a name="l00596"></a>00596       neighList(2) = childList(6)
<a name="l00597"></a>00597       neighList(3) = childList(7)
<a name="l00598"></a>00598       neighList(4) = childList(8)
<a name="l00599"></a>00599       
<a name="l00600"></a>00600     <span class="keyword">case</span> (TOP)
<a name="l00601"></a>00601       neighList(1) = childList(1)
<a name="l00602"></a>00602       neighList(2) = childList(2)
<a name="l00603"></a>00603       neighList(3) = childList(3)
<a name="l00604"></a>00604       neighList(4) = childList(4)
<a name="l00605"></a>00605       
<a name="l00606"></a>00606   <span class="keyword">end select</span>
<a name="l00607"></a>00607   return
<a name="l00608"></a>00608 
<a name="l00609"></a>00609 <span class="keyword">end subroutine neighbors</span>
<a name="l00610"></a>00610 
<a name="l00611"></a>00611 <span class="comment">!===============================================================================</span>
<a name="l00612"></a>00612 <span class="comment"></span>
<a name="l00613"></a>00613 !&gt; @brief Returns the refinement level of a block
<a name="l00614"></a>00614 !&gt; @param bID The (absolute) block ID of which one wants the mesh level
<a name="l00615"></a><a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">00615</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(bID, level)
<a name="l00616"></a>00616 
<a name="l00617"></a>00617   use <span class="keywordflow">parameters</span>
<a name="l00618"></a>00618   use <span class="keywordflow">globals</span>
<a name="l00619"></a>00619   <span class="keyword">implicit none</span>
<a name="l00620"></a>00620 
<a name="l00621"></a>00621   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00622"></a>00622   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: level
<a name="l00623"></a>00623 
<a name="l00624"></a>00624   <span class="keyword">if</span> (bID.eq.-1) <span class="keyword">then</span>
<a name="l00625"></a>00625     level = -1
<a name="l00626"></a>00626     return
<a name="l00627"></a>00627   <span class="keyword">end if</span>
<a name="l00628"></a>00628 
<a name="l00629"></a>00629   level = -1
<a name="l00630"></a>00630   <span class="keyword">do</span> level=1,<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>
<a name="l00631"></a>00631     <span class="keyword">if</span> ((bID.ge.<a class="code" href="namespaceglobals.html#af6edc2da1a32e822dbcb2ca8be0e89ee">minID</a>(level)).and.(bID.le.maxID(level))) <span class="keyword">then</span>
<a name="l00632"></a>00632       return
<a name="l00633"></a>00633     <span class="keyword">end if</span>
<a name="l00634"></a>00634   <span class="keyword">end do</span>
<a name="l00635"></a>00635 
<a name="l00636"></a>00636 <span class="keyword">end subroutine meshlevel</span>
<a name="l00637"></a>00637 
<a name="l00638"></a>00638 <span class="comment">!===============================================================================</span><span class="comment"></span>
<a name="l00639"></a>00639 !&gt; @brief Returns the refinement level of a block
<a name="l00640"></a>00640 !&gt; @param bID The (absolute) block ID of which one wants the mesh level
<a name="l00641"></a><a class="code" href="admesh_8f90.html#ace7f81c1773c8d0114d3b14bd569587d">00641</a> <span class="keyword">integer </span><span class="keyword">function </span><a class="code" href="admesh_8f90.html#ace7f81c1773c8d0114d3b14bd569587d">offsets</a>(level)
<a name="l00642"></a>00642 
<a name="l00643"></a>00643   use <span class="keywordflow">parameters</span>
<a name="l00644"></a>00644   use <span class="keywordflow">globals</span>
<a name="l00645"></a>00645   <span class="keyword">implicit none</span>
<a name="l00646"></a>00646 
<a name="l00647"></a>00647   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: level
<a name="l00648"></a>00648   
<a name="l00649"></a>00649   <span class="keywordtype">integer</span> :: ilev
<a name="l00650"></a>00650 
<a name="l00651"></a>00651   <a class="code" href="admesh_8f90.html#ace7f81c1773c8d0114d3b14bd569587d">offsets</a> = 0
<a name="l00652"></a>00652 
<a name="l00653"></a>00653   <span class="keyword">do</span> ilev=2,level
<a name="l00654"></a>00654     <a class="code" href="admesh_8f90.html#ace7f81c1773c8d0114d3b14bd569587d">offsets</a> = <a class="code" href="admesh_8f90.html#ace7f81c1773c8d0114d3b14bd569587d">offsets</a> + <a class="code" href="namespaceglobals.html#aa2b6d36e152a06fc16e0485f67246d51">nbrootx</a>*<a class="code" href="namespaceglobals.html#acecb61066b7bf4c10245e2d983a2a4de">nbrooty</a>*<a class="code" href="namespaceglobals.html#a28cee8c5a01e93eabc300065d4a489f2">nbrootz</a>*8**(ilev-2)
<a name="l00655"></a>00655   <span class="keyword">end do</span>
<a name="l00656"></a>00656 
<a name="l00657"></a>00657   return
<a name="l00658"></a>00658 <span class="keyword">end function offsets</span>
<a name="l00659"></a>00659 
<a name="l00660"></a>00660 
<a name="l00661"></a>00661 
<a name="l00662"></a>00662 <span class="comment">!===============================================================================</span>
<a name="l00663"></a>00663 <span class="comment"></span>
<a name="l00664"></a>00664 !&gt; @brief Returns the bID of a block&#39;s firstborn
<a name="l00665"></a>00665 !&gt; @param bID The (absolute) block ID of the father
<a name="l00666"></a>00666 !&gt; @param fbID The (absolute) block ID of the block&#39;s firstborn child
<a name="l00667"></a><a class="code" href="admesh_8f90.html#ac0c8b2dd1f3b2aa459571fd109686a23">00667</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#ac0c8b2dd1f3b2aa459571fd109686a23">firstborn</a>(bID, firstbornID)
<a name="l00668"></a>00668 
<a name="l00669"></a>00669   use <span class="keywordflow">parameters</span>
<a name="l00670"></a>00670   use <span class="keywordflow">globals</span>
<a name="l00671"></a>00671   <span class="keyword">implicit none</span>
<a name="l00672"></a>00672 
<a name="l00673"></a>00673   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00674"></a>00674   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: firstbornID
<a name="l00675"></a>00675 
<a name="l00676"></a>00676   <span class="keywordtype">integer</span> :: offsets
<a name="l00677"></a>00677   <span class="keywordtype">integer</span> :: x, y, z, ilev, nx, ny, nz
<a name="l00678"></a>00678   <span class="keywordtype">integer</span> :: xp, yp, zp
<a name="l00679"></a>00679 
<a name="l00680"></a>00680   call <a class="code" href="admesh_8f90.html#a5a9cc822a866dea3b26d2469be216d84">bcoords</a>(bID, x, y, z)
<a name="l00681"></a>00681   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(bID, ilev)
<a name="l00682"></a>00682 <span class="comment">! DEBUG</span>
<a name="l00683"></a>00683 <span class="comment">!write(logu,*) &quot;Calling firstborn...&quot;</span>
<a name="l00684"></a>00684 <span class="comment">!write(logu,*) ilev</span>
<a name="l00685"></a>00685 <span class="comment">!if (ilev.gt.maxlev) then</span>
<a name="l00686"></a>00686 <span class="comment">!  write(logu,*) &quot;Block&quot;, bID, &quot;has firstborn beyond the max mesh level!!!&quot;</span>
<a name="l00687"></a>00687 <span class="comment">!  write(logu,*) &quot;Y U ASKING FOR IT?!&quot;</span>
<a name="l00688"></a>00688 <span class="comment">!end if</span>
<a name="l00689"></a>00689 <span class="comment">! DEBUG    </span>
<a name="l00690"></a>00690   nx = <a class="code" href="namespaceglobals.html#a295174106a6216b803f676d41c98c655">nbx</a>(ilev+1)
<a name="l00691"></a>00691   ny = nby(ilev+1)
<a name="l00692"></a>00692   nz = nbz(ilev+1)  
<a name="l00693"></a>00693 
<a name="l00694"></a>00694   xp = 2*x-1
<a name="l00695"></a>00695   yp = 2*y-1
<a name="l00696"></a>00696   zp = 2*z-1
<a name="l00697"></a>00697 
<a name="l00698"></a>00698   firstbornID = 1 + (xp-1) + (yp-1)*nx + (zp-1)*nx*ny + offsets(ilev+1)
<a name="l00699"></a>00699 
<a name="l00700"></a>00700 <span class="keyword">end subroutine firstborn</span>
<a name="l00701"></a>00701 
<a name="l00702"></a>00702 <span class="comment">!===============================================================================</span>
<a name="l00703"></a>00703 <span class="comment"></span>
<a name="l00704"></a>00704 !&gt; @brief Returns a list of bIDs with all 8 siblings
<a name="l00705"></a>00705 !&gt; @param bID The block ID of one of the siblings
<a name="l00706"></a>00706 !&gt; @param sibling_list The list of the 8 (absolute) block IDs of the block&#39;s
<a name="l00707"></a>00707 !! siblings, including itself.
<a name="l00708"></a>00708 !&gt; @details The siblings are returned in &quot;natural order&quot;: first x, then y,
<a name="l00709"></a>00709 !! last z, producing the following sibling ordering:
<a name="l00710"></a>00710 !!    ---------
<a name="l00711"></a>00711 !!    | 7 | 8 |   
<a name="l00712"></a>00712 !!    ---------   z = top
<a name="l00713"></a>00713 !!    | 5 | 6 |   
<a name="l00714"></a>00714 !!    ---------
<a name="l00715"></a>00715 !!    ---------
<a name="l00716"></a>00716 !!    | 3 | 4 |   
<a name="l00717"></a>00717 !!    ---------   z = bottom
<a name="l00718"></a>00718 !!    | 1 | 2 |   
<a name="l00719"></a>00719 !! ^  ---------
<a name="l00720"></a>00720 !! |
<a name="l00721"></a>00721 !! y  x --&gt;
<a name="l00722"></a><a class="code" href="admesh_8f90.html#aefb084d06b41cc52ecb6c8e240ffc586">00722</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#aefb084d06b41cc52ecb6c8e240ffc586">siblings</a>(bID, sibling_list)
<a name="l00723"></a>00723 
<a name="l00724"></a>00724   use <span class="keywordflow">parameters</span>
<a name="l00725"></a>00725   use <span class="keywordflow">globals</span>
<a name="l00726"></a>00726   <span class="keyword">implicit none</span>
<a name="l00727"></a>00727 
<a name="l00728"></a>00728   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00729"></a>00729   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: sibling_list(8)
<a name="l00730"></a>00730 
<a name="l00731"></a>00731   <span class="keywordtype">integer</span> :: fatherID, firstbornID, ilev, nx, ny, nz, i
<a name="l00732"></a>00732 
<a name="l00733"></a>00733   call <a class="code" href="admesh_8f90.html#a2f828695825350cb25cf427b96489361">father</a>(bID, fatherID)
<a name="l00734"></a>00734   
<a name="l00735"></a>00735   <span class="keyword">if</span> (fatherID.eq.-1) <span class="keyword">then</span>
<a name="l00736"></a>00736     <span class="keyword">do</span> i=1,8
<a name="l00737"></a>00737       sibling_list(i) = -1
<a name="l00738"></a>00738     <span class="keyword">end do</span>
<a name="l00739"></a>00739     return
<a name="l00740"></a>00740   <span class="keyword">end if</span>
<a name="l00741"></a>00741   call <a class="code" href="admesh_8f90.html#ac0c8b2dd1f3b2aa459571fd109686a23">firstborn</a>(fatherID, firstbornID)
<a name="l00742"></a>00742   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(bID, ilev)
<a name="l00743"></a>00743 
<a name="l00744"></a>00744   nx = <a class="code" href="namespaceglobals.html#a295174106a6216b803f676d41c98c655">nbx</a>(ilev)
<a name="l00745"></a>00745   ny = nby(ilev)
<a name="l00746"></a>00746   nz = nbz(ilev)
<a name="l00747"></a>00747 
<a name="l00748"></a>00748   sibling_list(1) = firstbornID
<a name="l00749"></a>00749   sibling_list(2) = firstbornID + 1
<a name="l00750"></a>00750   sibling_list(3) = firstbornID + nx
<a name="l00751"></a>00751   sibling_list(4) = firstbornID + nx + 1
<a name="l00752"></a>00752 
<a name="l00753"></a>00753   sibling_list(5) = firstbornID + nx*ny
<a name="l00754"></a>00754   sibling_list(6) = firstbornID + nx*ny + 1
<a name="l00755"></a>00755   sibling_list(7) = firstbornID + nx*ny + nx
<a name="l00756"></a>00756   sibling_list(8) = firstbornID + nx*ny + nx + 1
<a name="l00757"></a>00757   
<a name="l00758"></a>00758 <span class="keyword">end subroutine siblings</span>
<a name="l00759"></a>00759 
<a name="l00760"></a>00760 <span class="comment">!===============================================================================</span>
<a name="l00761"></a>00761 
<a name="l00762"></a>00762 <span class="comment">! &gt;&gt; OBSOLETE</span><span class="comment"></span>
<a name="l00763"></a>00763 !&gt; @brief Calculates the sibling ID of a block
<a name="l00764"></a>00764 !&gt; @param bID The (absolute) block ID
<a name="l00765"></a>00765 !&gt; @param sID The sibling ID of the block, following the &quot;natural&quot; order:
<a name="l00766"></a>00766 !!    ---------
<a name="l00767"></a>00767 !!    | 7 | 8 |   
<a name="l00768"></a>00768 !!    ---------   z = top
<a name="l00769"></a>00769 !!    | 5 | 6 |   
<a name="l00770"></a>00770 !!    ---------
<a name="l00771"></a>00771 !!    ---------
<a name="l00772"></a>00772 !!    | 3 | 4 |   
<a name="l00773"></a>00773 !!    ---------   z = bottom
<a name="l00774"></a>00774 !!    | 1 | 2 |   
<a name="l00775"></a>00775 !! ^  ---------
<a name="l00776"></a>00776 !! |   
<a name="l00777"></a>00777 !! y  x --&gt;
<a name="l00778"></a><a class="code" href="admesh_8f90.html#a1d0b82283b0c4555de61abc534b60afe">00778</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a1d0b82283b0c4555de61abc534b60afe">siblingID</a>(bID, sID)
<a name="l00779"></a>00779 
<a name="l00780"></a>00780   use <span class="keywordflow">parameters</span>
<a name="l00781"></a>00781   <span class="keyword">implicit none</span>
<a name="l00782"></a>00782 
<a name="l00783"></a>00783   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00784"></a>00784   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: sID
<a name="l00785"></a>00785 
<a name="l00786"></a>00786   <span class="keywordtype">integer</span> :: sibling_list(8), i, fatherID
<a name="l00787"></a>00787 
<a name="l00788"></a>00788   call <a class="code" href="admesh_8f90.html#a2f828695825350cb25cf427b96489361">father</a>(bID, fatherID)
<a name="l00789"></a>00789 <span class="comment">!  print*, &quot;Father of&quot;, bID, &quot;is&quot;, fatherID  ! DEBUG</span>
<a name="l00790"></a>00790   <span class="keyword">if</span> (fatherID.eq.-1) <span class="keyword">then</span>
<a name="l00791"></a>00791     <span class="comment">! return -1 if block is root block (no father or siblings)</span>
<a name="l00792"></a>00792     sID = -1
<a name="l00793"></a>00793     return
<a name="l00794"></a>00794   <span class="keyword">end if</span>
<a name="l00795"></a>00795 
<a name="l00796"></a>00796   call <a class="code" href="admesh_8f90.html#aefb084d06b41cc52ecb6c8e240ffc586">siblings</a>(bID, sibling_list)
<a name="l00797"></a>00797 
<a name="l00798"></a>00798   sID = -1
<a name="l00799"></a>00799   <span class="keyword">do</span> i=1,8
<a name="l00800"></a>00800     <span class="keyword">if</span> (bID.eq.sibling_list(i)) <span class="keyword">then</span>
<a name="l00801"></a>00801       sID = i
<a name="l00802"></a>00802       exit
<a name="l00803"></a>00803     <span class="keyword">end if</span>
<a name="l00804"></a>00804   <span class="keyword">end do</span>
<a name="l00805"></a>00805 
<a name="l00806"></a>00806 <span class="keyword">end subroutine siblingID</span>
<a name="l00807"></a>00807 <span class="comment">!===============================================================================</span>
<a name="l00808"></a>00808 <span class="comment"></span>
<a name="l00809"></a>00809 !&gt; @brief Calculates the sibling position (coords) of a block
<a name="l00810"></a>00810 !&gt; @param bID The (absolute) block ID
<a name="l00811"></a>00811 !&gt; @param sx The sibling&#39;s x-coordinate (0 or 1)
<a name="l00812"></a>00812 !&gt; @param sy The sibling&#39;s y-coordinate (0 or 1)
<a name="l00813"></a>00813 !&gt; @param sz The sibling&#39;s z-coordinate (0 or 1)
<a name="l00814"></a><a class="code" href="admesh_8f90.html#a5b56f8f8fd532b838ccd6a38f356ac8a">00814</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a5b56f8f8fd532b838ccd6a38f356ac8a">siblingCoords</a> (bID, sx, sy, sz)
<a name="l00815"></a>00815 
<a name="l00816"></a>00816   use <span class="keywordflow">parameters</span>
<a name="l00817"></a>00817   <span class="keyword">implicit none</span>
<a name="l00818"></a>00818 
<a name="l00819"></a>00819   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00820"></a>00820   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: sx, sy, sz
<a name="l00821"></a>00821 
<a name="l00822"></a>00822   <span class="keywordtype">integer</span> :: sibling_list(8), i, fatherID, sID
<a name="l00823"></a>00823 
<a name="l00824"></a>00824   call <a class="code" href="admesh_8f90.html#a2f828695825350cb25cf427b96489361">father</a>(bID, fatherID)
<a name="l00825"></a>00825   <span class="keyword">if</span> (fatherID.eq.-1) <span class="keyword">then</span>
<a name="l00826"></a>00826     <span class="comment">! return -1 if block is root block (no father or siblings)</span>
<a name="l00827"></a>00827     sx = -1;  sy = -1;  sz = -1;
<a name="l00828"></a>00828     return
<a name="l00829"></a>00829   <span class="keyword">end if</span>
<a name="l00830"></a>00830 
<a name="l00831"></a>00831   call <a class="code" href="admesh_8f90.html#aefb084d06b41cc52ecb6c8e240ffc586">siblings</a>(bID, sibling_list)
<a name="l00832"></a>00832 
<a name="l00833"></a>00833   sID = -1
<a name="l00834"></a>00834   <span class="keyword">do</span> i=1,8
<a name="l00835"></a>00835     <span class="keyword">if</span> (bID.eq.sibling_list(i)) <span class="keyword">then</span>
<a name="l00836"></a>00836       sID = i
<a name="l00837"></a>00837       exit
<a name="l00838"></a>00838     <span class="keyword">end if</span>
<a name="l00839"></a>00839   <span class="keyword">end do</span>
<a name="l00840"></a>00840   
<a name="l00841"></a>00841   sx = 0
<a name="l00842"></a>00842   sy = 0
<a name="l00843"></a>00843   sz = 0
<a name="l00844"></a>00844   <span class="keyword">if</span> (mod(sID,2).eq.0) <span class="keyword">then</span>
<a name="l00845"></a>00845     sx = 1
<a name="l00846"></a>00846   <span class="keyword">end if</span>
<a name="l00847"></a>00847   <span class="keyword">if</span> ((sID.eq.3).or.(sID.eq.4).or.(sID.eq.7).or.(sID.eq.8)) <span class="keyword">then</span>
<a name="l00848"></a>00848     sy = 1
<a name="l00849"></a>00849   <span class="keyword">end if</span>
<a name="l00850"></a>00850   <span class="keyword">if</span> (sID.gt.4) <span class="keyword">then</span>
<a name="l00851"></a>00851     sz = 1
<a name="l00852"></a>00852   <span class="keyword">end if</span>
<a name="l00853"></a>00853 
<a name="l00854"></a>00854   return
<a name="l00855"></a>00855   
<a name="l00856"></a>00856 <span class="keyword">end subroutine siblingCoords</span>
<a name="l00857"></a>00857 
<a name="l00858"></a>00858 <span class="comment">!===============================================================================</span>
<a name="l00859"></a>00859 <span class="comment"></span>
<a name="l00860"></a>00860 !&gt; @brief Returns a list of bIDs with all 8 children of a block
<a name="l00861"></a>00861 !&gt; @param bID The (absolute) block ID of one of the siblings
<a name="l00862"></a>00862 !&gt; @param sibling_list The list of the 8 (absolute) block IDs of the block&#39;s
<a name="l00863"></a>00863 !! siblings, including itself. These are given in &quot;natural order&quot;: first x,
<a name="l00864"></a>00864 !! then y, then z
<a name="l00865"></a><a class="code" href="admesh_8f90.html#adc3672c44efbd2b631e63360684689c7">00865</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#adc3672c44efbd2b631e63360684689c7">children</a>(bID, children_list)
<a name="l00866"></a>00866 
<a name="l00867"></a>00867   use <span class="keywordflow">parameters</span>
<a name="l00868"></a>00868   use <span class="keywordflow">globals</span>
<a name="l00869"></a>00869   <span class="keyword">implicit none</span>
<a name="l00870"></a>00870 
<a name="l00871"></a>00871   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00872"></a>00872   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: children_list(8)
<a name="l00873"></a>00873 
<a name="l00874"></a>00874   <span class="keywordtype">integer</span> :: firstbornID, ilev, nx, ny, nz
<a name="l00875"></a>00875 
<a name="l00876"></a>00876   call <a class="code" href="admesh_8f90.html#ac0c8b2dd1f3b2aa459571fd109686a23">firstborn</a>(bID, firstbornID)
<a name="l00877"></a>00877   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(bID, ilev)
<a name="l00878"></a>00878   nx = <a class="code" href="namespaceglobals.html#a295174106a6216b803f676d41c98c655">nbx</a>(ilev+1)
<a name="l00879"></a>00879   ny = nby(ilev+1)
<a name="l00880"></a>00880   nz = nbz(ilev+1)
<a name="l00881"></a>00881 
<a name="l00882"></a>00882   children_list(1) = firstbornID
<a name="l00883"></a>00883   children_list(2) = firstbornID + 1
<a name="l00884"></a>00884   children_list(3) = firstbornID + nx
<a name="l00885"></a>00885   children_list(4) = firstbornID + nx + 1
<a name="l00886"></a>00886 
<a name="l00887"></a>00887   children_list(5) = firstbornID + nx*ny
<a name="l00888"></a>00888   children_list(6) = firstbornID + nx*ny + 1
<a name="l00889"></a>00889   children_list(7) = firstbornID + nx*ny + nx
<a name="l00890"></a>00890   children_list(8) = firstbornID + nx*ny + nx + 1
<a name="l00891"></a>00891     
<a name="l00892"></a>00892 <span class="keyword">end subroutine children</span>
<a name="l00893"></a>00893 
<a name="l00894"></a>00894 <span class="comment">!===============================================================================</span>
<a name="l00895"></a>00895 <span class="comment"></span>
<a name="l00896"></a>00896 !&gt; @brief Returns a block&#39;s father&#39;s bID
<a name="l00897"></a>00897 !&gt; @param bID The block&#39;s (absolute) bID
<a name="l00898"></a>00898 !&gt; @param fatherbID The block&#39;s father&#39;s (absolute) bID
<a name="l00899"></a><a class="code" href="admesh_8f90.html#a2f828695825350cb25cf427b96489361">00899</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a2f828695825350cb25cf427b96489361">father</a>(bID, fatherID)
<a name="l00900"></a>00900 
<a name="l00901"></a>00901   use <span class="keywordflow">parameters</span>
<a name="l00902"></a>00902   use <span class="keywordflow">globals</span>
<a name="l00903"></a>00903   <span class="keyword">implicit none</span>
<a name="l00904"></a>00904 
<a name="l00905"></a>00905   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00906"></a>00906   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: fatherID
<a name="l00907"></a>00907 
<a name="l00908"></a>00908   <span class="keywordtype">integer</span> :: offsets
<a name="l00909"></a>00909   <span class="keywordtype">integer</span> :: x, y, z, ilev, nx, ny, nz
<a name="l00910"></a>00910   <span class="keywordtype">integer</span> :: xp, yp, zp
<a name="l00911"></a>00911 
<a name="l00912"></a>00912   <span class="keyword">if</span> (bID.eq.-1) <span class="keyword">then</span>
<a name="l00913"></a>00913     fatherID = -1
<a name="l00914"></a>00914     return
<a name="l00915"></a>00915   <span class="keyword">end if</span>
<a name="l00916"></a>00916 
<a name="l00917"></a>00917   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(bID, ilev)
<a name="l00918"></a>00918 
<a name="l00919"></a>00919   <span class="keyword">if</span> (ilev.eq.1) <span class="keyword">then</span>
<a name="l00920"></a>00920   
<a name="l00921"></a>00921     fatherID = -1
<a name="l00922"></a>00922     return
<a name="l00923"></a>00923     
<a name="l00924"></a>00924   <span class="keyword">else</span>
<a name="l00925"></a>00925   
<a name="l00926"></a>00926     call <a class="code" href="admesh_8f90.html#a5a9cc822a866dea3b26d2469be216d84">bcoords</a>(bID, x, y, z)
<a name="l00927"></a>00927 
<a name="l00928"></a>00928     xp = floor((x+1)/2.0)
<a name="l00929"></a>00929     yp = floor((y+1)/2.0)
<a name="l00930"></a>00930     zp = floor((z+1)/2.0)
<a name="l00931"></a>00931 
<a name="l00932"></a>00932     nx = <a class="code" href="namespaceglobals.html#a295174106a6216b803f676d41c98c655">nbx</a>(ilev-1)
<a name="l00933"></a>00933     ny = nby(ilev-1)
<a name="l00934"></a>00934     nz = nbz(ilev-1)
<a name="l00935"></a>00935 
<a name="l00936"></a>00936     fatherID = 1 + (xp-1) + (yp-1)*nx + (zp-1)*nx*ny + offsets(ilev-1)
<a name="l00937"></a>00937 
<a name="l00938"></a>00938 <span class="comment">!    print*, &quot;Block&quot;, bID, &quot;, x=&quot;, x, &quot;, y=&quot;, y, &quot;, z=&quot;, z  ! DEBUG</span>
<a name="l00939"></a>00939 <span class="comment">!    print*, bID, &quot;&#39;s father coords:&quot;, xp, yp, zp  ! DEBUG</span>
<a name="l00940"></a>00940 <span class="comment">!    print*, &#39;&#39;  ! DEBUG</span>
<a name="l00941"></a>00941     
<a name="l00942"></a>00942   <span class="keyword">end if</span>
<a name="l00943"></a>00943 
<a name="l00944"></a>00944 <span class="keyword">end subroutine father</span>
<a name="l00945"></a>00945 
<a name="l00946"></a>00946 
<a name="l00947"></a>00947 <span class="comment">!===============================================================================</span>
<a name="l00948"></a>00948 <span class="comment"></span>
<a name="l00949"></a>00949 !&gt; @brief Returns the (x,y,z) local integer coordinates of a block at
<a name="l00950"></a>00950 !! the block&#39;s mesh level
<a name="l00951"></a>00951 !&gt; @param bID The (absolute) block ID of the block
<a name="l00952"></a>00952 !&gt; @param x The level-specific integer x-coordinate
<a name="l00953"></a>00953 !&gt; @param y The level-specific integer y-coordinate
<a name="l00954"></a>00954 !&gt; @param z The level-specific integer z-coordinate
<a name="l00955"></a><a class="code" href="admesh_8f90.html#a5a9cc822a866dea3b26d2469be216d84">00955</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a5a9cc822a866dea3b26d2469be216d84">bcoords</a>(bID, x, y, z)
<a name="l00956"></a>00956 
<a name="l00957"></a>00957   use <span class="keywordflow">parameters</span>
<a name="l00958"></a>00958   use <span class="keywordflow">globals</span>
<a name="l00959"></a>00959   <span class="keyword">implicit none</span>
<a name="l00960"></a>00960 
<a name="l00961"></a>00961   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00962"></a>00962   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: x, y, z
<a name="l00963"></a>00963 
<a name="l00964"></a>00964   <span class="keywordtype">integer</span> :: offsets
<a name="l00965"></a>00965   <span class="keywordtype">integer</span> :: ilev, nx, ny, nz, localID
<a name="l00966"></a>00966 
<a name="l00967"></a>00967   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(bID, ilev)
<a name="l00968"></a>00968   nx = <a class="code" href="namespaceglobals.html#a295174106a6216b803f676d41c98c655">nbx</a>(ilev)
<a name="l00969"></a>00969   ny = nby(ilev)
<a name="l00970"></a>00970   nz = nbz(ilev)
<a name="l00971"></a>00971 
<a name="l00972"></a>00972   localID = bID - offsets(ilev)
<a name="l00973"></a>00973   x = mod(localID,nx)
<a name="l00974"></a>00974   <span class="keyword">if</span> (x.eq.0) x=nx
<a name="l00975"></a>00975   y = mod(ceiling(localID*1.0/(nx)),ny)
<a name="l00976"></a>00976   <span class="keyword">if</span> (y.eq.0) y=ny
<a name="l00977"></a>00977   z = mod(ceiling(localID*1.0/(nx*ny)),nz)
<a name="l00978"></a>00978   <span class="keyword">if</span> (z.eq.0) z=nz
<a name="l00979"></a>00979 
<a name="l00980"></a>00980 <span class="keyword">end subroutine bcoords</span>
<a name="l00981"></a>00981 
<a name="l00982"></a>00982 <span class="comment">!===============================================================================</span>
<a name="l00983"></a>00983 <span class="comment"></span>
<a name="l00984"></a>00984 !&gt; @brief Returns the physical coordinates (in code units) of a block&#39;s
<a name="l00985"></a>00985 !! reference corner
<a name="l00986"></a>00986 !&gt; @param bID The (absolute) block ID of the block
<a name="l00987"></a>00987 !&gt; @param x The level-specific integer x-coordinate
<a name="l00988"></a>00988 !&gt; @param y The level-specific integer y-coordinate
<a name="l00989"></a>00989 !&gt; @param z The level-specific integer z-coordinate
<a name="l00990"></a><a class="code" href="admesh_8f90.html#af40e152b0f3f3b052718add6289b47dc">00990</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#af40e152b0f3f3b052718add6289b47dc">getRefCorner</a>(bID, xx, yy, zz)
<a name="l00991"></a>00991 
<a name="l00992"></a>00992   use <span class="keywordflow">parameters</span>
<a name="l00993"></a>00993   use <span class="keywordflow">globals</span>
<a name="l00994"></a>00994   <span class="keyword">implicit none</span>
<a name="l00995"></a>00995 
<a name="l00996"></a>00996   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00997"></a>00997   <span class="keywordtype">real</span>, <span class="keywordtype">intent(out)</span> :: xx, yy, zz
<a name="l00998"></a>00998 
<a name="l00999"></a>00999   <span class="keywordtype">integer</span> :: x, y, z, ilev
<a name="l01000"></a>01000   
<a name="l01001"></a>01001   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(bID, ilev)
<a name="l01002"></a>01002   call <a class="code" href="admesh_8f90.html#a5a9cc822a866dea3b26d2469be216d84">bcoords</a>(bID, x, y, z)
<a name="l01003"></a>01003 
<a name="l01004"></a>01004   xx = (x-1)*<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a>*<a class="code" href="namespaceglobals.html#a4b0c55fb2db0260908cd128c2a6f762f">dx</a>(ilev)
<a name="l01005"></a>01005   yy = (y-1)*<a class="code" href="namespaceparameters.html#aa52d0561bd220fc5f155b7d1932d8f1d">ncells_y</a>*<a class="code" href="namespaceglobals.html#a75a803e9fb814f0f532f09795c31948f">dy</a>(ilev)
<a name="l01006"></a>01006   zz = (z-1)*<a class="code" href="namespaceparameters.html#a568fe0267a053f4e31fc851dba5a1ede">ncells_z</a>*<a class="code" href="namespaceglobals.html#a359c03a4b72ff3ab06d5fe9fbc810f9a">dz</a>(ilev)
<a name="l01007"></a>01007 
<a name="l01008"></a>01008 <span class="keyword">end subroutine getRefCorner</span>
<a name="l01009"></a>01009 
<a name="l01010"></a>01010 <span class="comment">!===============================================================================</span>
<a name="l01011"></a>01011 <span class="comment"></span>
<a name="l01012"></a>01012 !&gt; @brief Returns the physical position (in code units) of a single cell
<a name="l01013"></a>01013 !&gt; @param bID The block ID of the host block
<a name="l01014"></a>01014 !&gt; @param i The cell&#39;s integer x-position within the block (1 to ncells_x)
<a name="l01015"></a>01015 !&gt; @param j The cell&#39;s integer y-position within the block (1 to ncells_y)
<a name="l01016"></a>01016 !&gt; @param k The cell&#39;s integer z-position within the block (1 to ncells_z)
<a name="l01017"></a>01017 !&gt; @param xx The x-position of the cell&#39;s physical center, in code units
<a name="l01018"></a>01018 !&gt; @param yy The y-position of the cell&#39;s physical center, in code units
<a name="l01019"></a>01019 !&gt; @param zz The z-position of the cell&#39;s physical center, in code units
<a name="l01020"></a><a class="code" href="admesh_8f90.html#a05707d1dd21fefa65fa00167bf69a7f4">01020</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a05707d1dd21fefa65fa00167bf69a7f4">cellPos</a> (bID, i, j, k, x, y, z)
<a name="l01021"></a>01021 
<a name="l01022"></a>01022   use <span class="keywordflow">parameters</span>
<a name="l01023"></a>01023   use <span class="keywordflow">globals</span>
<a name="l01024"></a>01024   <span class="keyword">implicit none</span>
<a name="l01025"></a>01025 
<a name="l01026"></a>01026   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l01027"></a>01027   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: i, j, k
<a name="l01028"></a>01028   <span class="keywordtype">real</span>, <span class="keywordtype">intent(out)</span> :: x, y, z
<a name="l01029"></a>01029 
<a name="l01030"></a>01030   <span class="keywordtype">integer</span> :: ilev, xb, yb, zb
<a name="l01031"></a>01031 
<a name="l01032"></a>01032   <span class="keyword">if</span> (bID.eq.-1) <span class="keyword">then</span>
<a name="l01033"></a>01033     x = -1.0
<a name="l01034"></a>01034     y = -1.0
<a name="l01035"></a>01035     z = -1.0
<a name="l01036"></a>01036     return
<a name="l01037"></a>01037   <span class="keyword">end if</span>
<a name="l01038"></a>01038 
<a name="l01039"></a>01039   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(bID, ilev)
<a name="l01040"></a>01040   call <a class="code" href="admesh_8f90.html#a5a9cc822a866dea3b26d2469be216d84">bcoords</a>(bID, xb, yb, zb)
<a name="l01041"></a>01041 
<a name="l01042"></a>01042   x = ((xb-1)*<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a> + (i-1) + 0.5) * <a class="code" href="namespaceglobals.html#a4b0c55fb2db0260908cd128c2a6f762f">dx</a>(ilev)
<a name="l01043"></a>01043   y = ((yb-1)*<a class="code" href="namespaceparameters.html#aa52d0561bd220fc5f155b7d1932d8f1d">ncells_y</a> + (j-1) + 0.5) * <a class="code" href="namespaceglobals.html#a75a803e9fb814f0f532f09795c31948f">dy</a>(ilev)
<a name="l01044"></a>01044   z = ((zb-1)*<a class="code" href="namespaceparameters.html#a568fe0267a053f4e31fc851dba5a1ede">ncells_z</a> + (k-1) + 0.5) * <a class="code" href="namespaceglobals.html#a359c03a4b72ff3ab06d5fe9fbc810f9a">dz</a>(ilev)
<a name="l01045"></a>01045 
<a name="l01046"></a>01046   return
<a name="l01047"></a>01047 
<a name="l01048"></a>01048 <span class="keyword">end subroutine cellPos</span>
<a name="l01049"></a>01049 
<a name="l01050"></a>01050 <span class="comment">!===============================================================================</span>
<a name="l01051"></a>01051 <span class="comment"></span>
<a name="l01052"></a>01052 !&gt; @brief Returns the rank of the process who owns this bID
<a name="l01053"></a>01053 !&gt; @details Returns -1 if the bID is not in globalBlocks
<a name="l01054"></a>01054 !&gt; @param bID The (absolute) block ID of the block
<a name="l01055"></a>01055 !&gt; @param process The block owner&#39;s rank
<a name="l01056"></a><a class="code" href="admesh_8f90.html#a5423257f930e1a76bcf559ca03bf74c6">01056</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a5423257f930e1a76bcf559ca03bf74c6">getOwner</a> (bID, owner)
<a name="l01057"></a>01057 
<a name="l01058"></a>01058   use <span class="keywordflow">parameters</span>
<a name="l01059"></a>01059   use <span class="keywordflow">globals</span>
<a name="l01060"></a>01060   <span class="keyword">implicit none</span>
<a name="l01061"></a>01061 
<a name="l01062"></a>01062   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l01063"></a>01063   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: owner
<a name="l01064"></a>01064 
<a name="l01065"></a>01065   <span class="keywordtype">integer</span> :: gIndx
<a name="l01066"></a>01066 
<a name="l01067"></a>01067   <span class="keyword">if</span> (bID.eq.-1) <span class="keyword">then</span>
<a name="l01068"></a>01068     owner = -1
<a name="l01069"></a>01069     return
<a name="l01070"></a>01070   <span class="keyword">end if</span>
<a name="l01071"></a>01071 
<a name="l01072"></a>01072   call <a class="code" href="utils_8f90.html#a2f2f03814c3471b9a0797e2f03655c68">find </a>(bID, <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>, <a class="code" href="namespaceparameters.html#a9956bfd2c200d8b3dd24e4294ed11770">nbMaxGlobal</a>, gIndx)
<a name="l01073"></a>01073   
<a name="l01074"></a>01074   <span class="keyword">if</span> (gIndx.ne.-1) <span class="keyword">then</span>
<a name="l01075"></a>01075     owner = (gIndx-1)/<a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>
<a name="l01076"></a>01076   <span class="keyword">else</span>
<a name="l01077"></a>01077     owner = -1
<a name="l01078"></a>01078   <span class="keyword">end if</span>
<a name="l01079"></a>01079   return
<a name="l01080"></a>01080 
<a name="l01081"></a>01081 <span class="keyword">end subroutine getOwner</span>
<a name="l01082"></a>01082 
<a name="l01083"></a>01083 <span class="comment">!===============================================================================</span>
<a name="l01084"></a>01084 <span class="comment"></span>
<a name="l01085"></a>01085 !&gt; @brief Ensure the proximity criterion is on all levels less than or equal
<a name="l01086"></a>01086 !! to finestLev
<a name="l01087"></a>01087 !&gt; @details This routine will flag blocks for refinement or un-flag blocks
<a name="l01088"></a>01088 !! for coarsening if they would violate the level proximity condition. Only
<a name="l01089"></a>01089 !! level finestLev and any coarser levels are checked. Assumesthe refinement
<a name="l01090"></a>01090 !! flags were previously calculated and synchronized.  
<a name="l01091"></a>01091 !&gt; @param startLev Initial (finer) level to check
<a name="l01092"></a><a class="code" href="admesh_8f90.html#a5160d5783dcaa66aa71416b785554366">01092</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a5160d5783dcaa66aa71416b785554366">checkProximity</a> (finestLev)
<a name="l01093"></a>01093 
<a name="l01094"></a>01094   use <span class="keywordflow">globals</span>
<a name="l01095"></a>01095   use <span class="keywordflow">parameters</span>
<a name="l01096"></a>01096   <span class="keyword">implicit none</span>
<a name="l01097"></a>01097 
<a name="l01098"></a>01098   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: finestLev
<a name="l01099"></a>01099 
<a name="l01100"></a>01100   <span class="keywordtype">integer</span> :: level, ierr, nb, nb1, nb2, nb3, nb4
<a name="l01101"></a>01101   <span class="keywordtype">integer</span> :: bID, nID, dir, i, nextIndx, bflag, nflag
<a name="l01102"></a>01102   <span class="keywordtype">integer</span> :: neighType, neighList(4), owner
<a name="l01103"></a>01103   <span class="keywordtype">integer</span> :: sib_list(8)  <span class="comment">! DEBUG</span>
<a name="l01104"></a>01104   <span class="keywordtype">logical</span> :: inhibited
<a name="l01105"></a>01105 
<a name="l01106"></a>01106   <span class="comment">! DEBUG</span>
<a name="l01107"></a>01107 <span class="comment">!  write(logu,*) &quot;&quot;</span>
<a name="l01108"></a>01108 <span class="comment">!  write(logu,*) &quot;Starting Proximity checks ...&quot;</span>
<a name="l01109"></a>01109   <span class="comment">! DEBUG</span>
<a name="l01110"></a>01110   
<a name="l01111"></a>01111   <span class="keyword">do</span> level=finestLev,1,-1
<a name="l01112"></a>01112     <span class="comment">! For every level from startLev up to root ...</span>
<a name="l01113"></a>01113 
<a name="l01114"></a>01114     <span class="comment">! DEBUG</span>
<a name="l01115"></a>01115 <span class="comment">!    write(logu,*) &quot;Checking blocks in level&quot;, level</span>
<a name="l01116"></a>01116 <span class="comment">!    write(logu,*) &quot;GLOBAL refinement list:&quot;</span>
<a name="l01117"></a>01117 <span class="comment">!    do nb=1,nbMaxProc</span>
<a name="l01118"></a>01118 <span class="comment">!      if (gToRefine(nb).ne.-1) then</span>
<a name="l01119"></a>01119 <span class="comment">!        write(logu,*) gToRefine(nb)</span>
<a name="l01120"></a>01120 <span class="comment">!      end if</span>
<a name="l01121"></a>01121 <span class="comment">!    end do</span>
<a name="l01122"></a>01122     <span class="comment">! DEBUG</span>
<a name="l01123"></a>01123 
<a name="l01124"></a>01124     <span class="keyword">do</span> nb=1,<a class="code" href="namespaceparameters.html#a9956bfd2c200d8b3dd24e4294ed11770">nbMaxGlobal</a>
<a name="l01125"></a>01125       bID = <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb)
<a name="l01126"></a>01126       <span class="keyword">if</span> ((bID.ne.-1).and.(bID.ge.<a class="code" href="namespaceglobals.html#af6edc2da1a32e822dbcb2ca8be0e89ee">minID</a>(level)).and.(bID.le.maxID(level))) <span class="keyword">then</span>
<a name="l01127"></a>01127 
<a name="l01128"></a>01128         <span class="comment">! This block&#39;s current refinement flag</span>
<a name="l01129"></a>01129         bflag = <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>(nb)
<a name="l01130"></a>01130 
<a name="l01131"></a>01131         <span class="comment">! Step 1: apply proximity refinement</span>
<a name="l01132"></a>01132         <span class="comment">!</span>
<a name="l01133"></a>01133         <span class="comment">! For every block in this level currently marked for refinement, check if:</span>
<a name="l01134"></a>01134         <span class="comment">! a) an unmarked neighbor must be marked for refinement due to proximity</span>
<a name="l01135"></a>01135         <span class="comment">! b) a neighbor marked for coarsening must be inhibited and/or marked</span>
<a name="l01136"></a>01136         <span class="comment">! for refinement due to proximity</span>
<a name="l01137"></a>01137         <span class="comment">! Note: refinement is never inhibited</span>
<a name="l01138"></a>01138         <span class="comment">!</span>
<a name="l01139"></a>01139         <span class="keyword">if</span> (bflag.eq.FLAG_REFINE) <span class="keyword">then</span>
<a name="l01140"></a>01140           <span class="keyword">do</span> dir=1,6
<a name="l01141"></a>01141             <span class="comment">! Check all neighbors</span>
<a name="l01142"></a>01142           
<a name="l01143"></a>01143             call <a class="code" href="admesh_8f90.html#af94ac1ac28f8c4c52bc7687e51213eb6">neighbors </a>(bID, dir, neighType, neighList)
<a name="l01144"></a>01144             call <a class="code" href="admesh_8f90.html#a5423257f930e1a76bcf559ca03bf74c6">getOwner </a>(bID, owner)
<a name="l01145"></a>01145 
<a name="l01146"></a>01146             <span class="comment">! Inhibit coarsening of same-level neighbors</span>
<a name="l01147"></a>01147             <span class="keyword">if</span> (neighType.eq.NEIGH_SAME) <span class="keyword">then</span>
<a name="l01148"></a>01148 
<a name="l01149"></a>01149               nID = neighList(1)
<a name="l01150"></a>01150               call <a class="code" href="utils_8f90.html#a2f2f03814c3471b9a0797e2f03655c68">find </a>(nID, <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>, <a class="code" href="namespaceparameters.html#a9956bfd2c200d8b3dd24e4294ed11770">nbMaxGlobal</a>, nb1)
<a name="l01151"></a>01151               nflag = <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>(nb1)
<a name="l01152"></a>01152               
<a name="l01153"></a>01153               <span class="keyword">if</span> (nflag.eq.FLAG_COARSE) <span class="keyword">then</span>
<a name="l01154"></a>01154                 <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>(nb1) = FLAG_NONE
<a name="l01155"></a>01155               <span class="keyword">end if</span>
<a name="l01156"></a>01156               
<a name="l01157"></a>01157             <span class="comment">! Force refinement of coarser neighbors</span>
<a name="l01158"></a>01158             <span class="keyword">else</span> <span class="keyword">if</span> (neighType.eq.NEIGH_COARSER) <span class="keyword">then</span>
<a name="l01159"></a>01159 
<a name="l01160"></a>01160               nID = neighList(1)
<a name="l01161"></a>01161               call <a class="code" href="utils_8f90.html#a2f2f03814c3471b9a0797e2f03655c68">find </a>(nID, <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>, <a class="code" href="namespaceparameters.html#a9956bfd2c200d8b3dd24e4294ed11770">nbMaxGlobal</a>, nb2)
<a name="l01162"></a>01162               nflag = <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>(nb2)
<a name="l01163"></a>01163 <span class="comment">! DEBUG</span>
<a name="l01164"></a>01164 <span class="comment">!if (nID.eq.213) then</span>
<a name="l01165"></a>01165 <span class="comment">!  write(logu,*) &quot;213 is being marked for refinement!&quot;</span>
<a name="l01166"></a>01166 <span class="comment">!  write(logu,*) &quot;induced by block&quot;, bID</span>
<a name="l01167"></a>01167 <span class="comment">!end if</span>
<a name="l01168"></a>01168 <span class="comment">! DEBUG</span>
<a name="l01169"></a>01169               <span class="keyword">if</span> (nflag.ne.FLAG_REFINE) <span class="keyword">then</span>
<a name="l01170"></a>01170                 <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>(nb2) = FLAG_REFINE
<a name="l01171"></a>01171               <span class="keyword">end if</span>
<a name="l01172"></a>01172                 
<a name="l01173"></a>01173             <span class="keyword">end if</span>
<a name="l01174"></a>01174           
<a name="l01175"></a>01175           <span class="keyword">end do</span>
<a name="l01176"></a>01176         <span class="keyword">end if</span>
<a name="l01177"></a>01177 
<a name="l01178"></a>01178         <span class="comment">! Step 2: inhibit coarsening due to proximity</span>
<a name="l01179"></a>01179         <span class="comment">!</span>
<a name="l01180"></a>01180         <span class="comment">! Now check all blocks marked for coarsening. Inhibit coarsening if:</span>
<a name="l01181"></a>01181         <span class="comment">! a) any finer neighbor is not marked for coarsening too</span>
<a name="l01182"></a>01182         <span class="comment">!</span>
<a name="l01183"></a>01183         <span class="keyword">if</span> (bflag.eq.FLAG_COARSE) <span class="keyword">then</span>
<a name="l01184"></a>01184         
<a name="l01185"></a>01185           inhibited = .false.
<a name="l01186"></a>01186           <span class="comment">! Check all neighbors</span>
<a name="l01187"></a>01187           <span class="keyword">do</span> dir=1,6
<a name="l01188"></a>01188 
<a name="l01189"></a>01189 <span class="comment">!            call neighbors(bID, dir, neighType, neighList)         </span>
<a name="l01190"></a>01190 <span class="comment">!            if (neighType.eq.NEIGH_FINER) then</span>
<a name="l01191"></a>01191 <span class="comment">!              do i=1,4</span>
<a name="l01192"></a>01192 
<a name="l01193"></a>01193 <span class="comment">!                nID = neighList(i)</span>
<a name="l01194"></a>01194 <span class="comment">!                call find (nID, globalBlocks, nbMaxGlobal, nb1)</span>
<a name="l01195"></a>01195 
<a name="l01196"></a>01196 <span class="comment">!                if (nb1.eq.-1) then</span>
<a name="l01197"></a>01197 <span class="comment">!                  refineFlags(nb) = FLAG_NONE</span>
<a name="l01198"></a>01198 <span class="comment">!                  inhibited = .true.</span>
<a name="l01199"></a>01199 <span class="comment">!                  exit</span>
<a name="l01200"></a>01200 <span class="comment">!                end if</span>
<a name="l01201"></a>01201 
<a name="l01202"></a>01202 <span class="comment">!              end do</span>
<a name="l01203"></a>01203 <span class="comment">!            end if</span>
<a name="l01204"></a>01204 
<a name="l01205"></a>01205 <span class="comment">!            ! Skip remaining checks if already inhibited</span>
<a name="l01206"></a>01206 <span class="comment">!            if (inhibited) exit</span>
<a name="l01207"></a>01207 
<a name="l01208"></a>01208             call <a class="code" href="admesh_8f90.html#af94ac1ac28f8c4c52bc7687e51213eb6">neighbors</a>(bID, dir, neighType, neighList)         
<a name="l01209"></a>01209             <span class="keyword">if</span> (neighType.eq.NEIGH_FINER) <span class="keyword">then</span>
<a name="l01210"></a>01210 
<a name="l01211"></a>01211               call <a class="code" href="admesh_8f90.html#aefb084d06b41cc52ecb6c8e240ffc586">siblings</a>(neighList(1), sib_list)
<a name="l01212"></a>01212               <span class="keyword">do</span> i=1,8
<a name="l01213"></a>01213 
<a name="l01214"></a>01214                 nID = sib_list(i)
<a name="l01215"></a>01215                 call <a class="code" href="utils_8f90.html#a2f2f03814c3471b9a0797e2f03655c68">find </a>(nID, <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>, <a class="code" href="namespaceparameters.html#a9956bfd2c200d8b3dd24e4294ed11770">nbMaxGlobal</a>, nb1)
<a name="l01216"></a>01216                 <span class="keyword">if</span> (nb1.ne.-1) <span class="keyword">then</span>
<a name="l01217"></a>01217                   nflag = <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>(nb1)
<a name="l01218"></a>01218                   <span class="keyword">if</span> (nflag.ne.FLAG_COARSE) <span class="keyword">then</span>
<a name="l01219"></a>01219                     <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>(nb) = FLAG_NONE
<a name="l01220"></a>01220                     inhibited = .true.
<a name="l01221"></a>01221                     exit
<a name="l01222"></a>01222                   <span class="keyword">end if</span>
<a name="l01223"></a>01223                 <span class="keyword">end if</span>
<a name="l01224"></a>01224 
<a name="l01225"></a>01225               <span class="keyword">end do</span>
<a name="l01226"></a>01226             <span class="keyword">end if</span>
<a name="l01227"></a>01227 
<a name="l01228"></a>01228             <span class="comment">! Skip remaining checks if already inhibited</span>
<a name="l01229"></a>01229             <span class="keyword">if</span> (inhibited) exit
<a name="l01230"></a>01230 
<a name="l01231"></a>01231           <span class="keyword">end do</span>
<a name="l01232"></a>01232         <span class="keyword">end if</span>
<a name="l01233"></a>01233 
<a name="l01234"></a>01234       <span class="keyword">end if</span>
<a name="l01235"></a>01235       
<a name="l01236"></a>01236     <span class="keyword">end do</span>
<a name="l01237"></a>01237   <span class="keyword">end do</span>
<a name="l01238"></a>01238 
<a name="l01239"></a>01239 <span class="comment">!  write(logu,*) &quot;Proximity checks done for all levels&quot;   ! DEBUG</span>
<a name="l01240"></a>01240  
<a name="l01241"></a>01241 
<a name="l01242"></a>01242 <span class="keyword">end subroutine checkProximity</span>
<a name="l01243"></a>01243 
<a name="l01244"></a>01244 <span class="comment">!===============================================================================</span>
<a name="l01245"></a>01245 <span class="comment"></span>
<a name="l01246"></a>01246 !&gt; @brief Refines a zone of the grid to the requested level
<a name="l01247"></a><a class="code" href="admesh_8f90.html#a9b4ced7e4b6179faaa21a79b5ceac994">01247</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a9b4ced7e4b6179faaa21a79b5ceac994">refineZone</a> (zone, z_level)
<a name="l01248"></a>01248 
<a name="l01249"></a>01249   use <span class="keywordflow">parameters</span>
<a name="l01250"></a>01250   use <span class="keywordflow">globals</span>
<a name="l01251"></a>01251   use <span class="keywordflow">initconds</span>
<a name="l01252"></a>01252   <span class="keyword">implicit none</span>
<a name="l01253"></a>01253 
<a name="l01254"></a>01254   <span class="keywordtype">real</span>, <span class="keywordtype">intent(in)</span> :: zone(7)  
<a name="l01255"></a>01255   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: z_level
<a name="l01256"></a>01256 
<a name="l01257"></a>01257   <span class="keywordtype">integer</span> :: ilev, ilev1, nb, nb1, nb2, nb3, bID, locInd, ierr, nID, dir
<a name="l01258"></a>01258   <span class="keywordtype">integer</span> :: fatherID, lev, own, neighList(4), neighType, gIndx, flag
<a name="l01259"></a>01259   <span class="keywordtype">integer</span> :: localFlags(nbMaxProc)
<a name="l01260"></a>01260   <span class="keywordtype">real</span> :: z_left, z_right, z_front, z_back, z_bottom, z_top
<a name="l01261"></a>01261   <span class="keywordtype">real</span> :: b_left, b_right, b_back, b_front, b_bottom, b_top
<a name="l01262"></a>01262 
<a name="l01263"></a>01263   <span class="comment">! Sanity check</span>
<a name="l01264"></a>01264   <span class="keyword">if</span> (z_level.gt.<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>) <span class="keyword">then</span>
<a name="l01265"></a>01265     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Impossible to refine IC zone to level&quot;</span>, z_level, <span class="stringliteral">&quot;!&quot;</span>
<a name="l01266"></a>01266     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;The maximum refinement level is&quot;</span>, <a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>
<a name="l01267"></a>01267     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;***ABORTING***&quot;</span>
<a name="l01268"></a>01268     stop
<a name="l01269"></a>01269   <span class="keyword">end if</span>
<a name="l01270"></a>01270 
<a name="l01271"></a>01271   <span class="comment">! Unpack zone bounding box</span>
<a name="l01272"></a>01272   z_left = zone(1)
<a name="l01273"></a>01273   z_right = zone(2)
<a name="l01274"></a>01274   z_front = zone(3)
<a name="l01275"></a>01275   z_back = zone(4)
<a name="l01276"></a>01276   z_bottom = zone(5)
<a name="l01277"></a>01277   z_top = zone(6)
<a name="l01278"></a>01278  
<a name="l01279"></a>01279   <span class="comment">! For all refinement levels up to the requestes level</span>
<a name="l01280"></a>01280   <span class="keyword">do</span> ilev=1,z_level-1
<a name="l01281"></a>01281 
<a name="l01282"></a>01282     <span class="comment">! DEBUG</span>
<a name="l01283"></a>01283     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l01284"></a>01284     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Checking blocks in level&quot;</span>, ilev
<a name="l01285"></a>01285 <span class="comment">!    write(logu,*) &quot;Local blocks:&quot;</span>
<a name="l01286"></a>01286 <span class="comment">!    do nb=1,nbMaxProc</span>
<a name="l01287"></a>01287 <span class="comment">!      if (localBlocks(nb).ne.-1) then</span>
<a name="l01288"></a>01288 <span class="comment">!        write(logu,*) localBlocks(nb)</span>
<a name="l01289"></a>01289 <span class="comment">!      end if</span>
<a name="l01290"></a>01290 <span class="comment">!    end do</span>
<a name="l01291"></a>01291     <span class="comment">! DEBUG</span>
<a name="l01292"></a>01292 
<a name="l01293"></a>01293     <span class="comment">! Clear local refinement flags</span>
<a name="l01294"></a>01294     localFlags(:) = 0
<a name="l01295"></a>01295  
<a name="l01296"></a>01296     <span class="comment">! Flag for refinement all *local* blocks that contain the zone</span>
<a name="l01297"></a>01297     <span class="keyword">do</span> nb=1,nbMaxProc
<a name="l01298"></a>01298       bID = <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>(nb)
<a name="l01299"></a>01299       <span class="keyword">if</span> ((bID.ne.-1).and.(bID.ge.<a class="code" href="namespaceglobals.html#af6edc2da1a32e822dbcb2ca8be0e89ee">minID</a>(ilev)).and.(bID.le.maxID(ilev))) <span class="keyword">then</span>
<a name="l01300"></a>01300 
<a name="l01301"></a>01301         <span class="comment">! Get reference corner position and convert to cgs</span>
<a name="l01302"></a>01302         call <a class="code" href="admesh_8f90.html#af40e152b0f3f3b052718add6289b47dc">getRefCorner</a>(bID, b_left, b_front, b_bottom)
<a name="l01303"></a>01303         b_right = (b_left + <a class="code" href="namespaceglobals.html#a4b0c55fb2db0260908cd128c2a6f762f">dx</a>(ilev)*<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a>) * <a class="code" href="namespaceparameters.html#a522e0ca69e61a46d801700b9a9ec9562">l_sc</a>
<a name="l01304"></a>01304         b_back = (b_front + <a class="code" href="namespaceglobals.html#a75a803e9fb814f0f532f09795c31948f">dy</a>(ilev)*nCells_y) * <a class="code" href="namespaceparameters.html#a522e0ca69e61a46d801700b9a9ec9562">l_sc</a>
<a name="l01305"></a>01305         b_top = (b_bottom + <a class="code" href="namespaceglobals.html#a359c03a4b72ff3ab06d5fe9fbc810f9a">dz</a>(ilev)*nCells_z) * <a class="code" href="namespaceparameters.html#a522e0ca69e61a46d801700b9a9ec9562">l_sc</a>
<a name="l01306"></a>01306         b_left = b_left * <a class="code" href="namespaceparameters.html#a522e0ca69e61a46d801700b9a9ec9562">l_sc</a>
<a name="l01307"></a>01307         b_front = b_front * <a class="code" href="namespaceparameters.html#a522e0ca69e61a46d801700b9a9ec9562">l_sc</a>
<a name="l01308"></a>01308         b_bottom = b_bottom * <a class="code" href="namespaceparameters.html#a522e0ca69e61a46d801700b9a9ec9562">l_sc</a>
<a name="l01309"></a>01309 
<a name="l01310"></a>01310         <span class="comment">! DEBUG</span>
<a name="l01311"></a>01311 <span class="comment">!        write(logu,*) &quot;&quot;</span>
<a name="l01312"></a>01312 <span class="comment">!        write(logu,*) &quot;Local block&quot;, bID, &quot;has bounding volume&quot;</span>
<a name="l01313"></a>01313 <span class="comment">!        write(logu,*) &quot;x:&quot;, b_left, b_right</span>
<a name="l01314"></a>01314 <span class="comment">!        write(logu,*) &quot;y:&quot;, b_front, b_back</span>
<a name="l01315"></a>01315 <span class="comment">!        write(logu,*) &quot;z:&quot;, b_bottom, b_top</span>
<a name="l01316"></a>01316         <span class="comment">! DEBUG</span>
<a name="l01317"></a>01317 
<a name="l01318"></a>01318         <span class="comment">! If block within bounding box, flag it for refinement         </span>
<a name="l01319"></a>01319         <span class="keyword">if</span> ((z_left.lt.b_right).and.(z_right.gt.b_left).and.&amp;
<a name="l01320"></a>01320           (z_front.lt.b_back).and.(z_back.gt.b_front).and.&amp;
<a name="l01321"></a>01321           (z_bottom.lt.b_top).and.(z_top.gt.b_bottom)) <span class="keyword">then</span>
<a name="l01322"></a>01322           localFlags(nb) = FLAG_REFINE
<a name="l01323"></a>01323         <span class="keyword">end if</span>
<a name="l01324"></a>01324 
<a name="l01325"></a>01325       <span class="keyword">end if</span>
<a name="l01326"></a>01326     <span class="keyword">end do</span>
<a name="l01327"></a>01327 
<a name="l01328"></a>01328 <span class="comment">! DEBUG</span>
<a name="l01329"></a>01329 <span class="comment">!write(logu,*) &quot;refineFlags after </span>
<a name="l01330"></a>01330 <span class="comment">!do nb3=1,nbMaxGlobal</span>
<a name="l01331"></a>01331 <span class="comment">!  if (globalBlocks(nb3).ne.-1) then</span>
<a name="l01332"></a>01332 <span class="comment">!    write(logu,*</span>
<a name="l01333"></a>01333 <span class="comment">!  end if</span>
<a name="l01334"></a>01334 <span class="comment">!end do</span>
<a name="l01335"></a>01335 <span class="comment">! DEBUG</span>
<a name="l01336"></a>01336 
<a name="l01337"></a>01337     <span class="comment">! Syncronize refinement flags</span>
<a name="l01338"></a>01338     call mpi_allgather (localFlags, nbMaxProc, mpi_integer, &amp;
<a name="l01339"></a>01339     <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>, nbMaxProc, mpi_integer, mpi_comm_world, ierr)
<a name="l01340"></a>01340 
<a name="l01341"></a>01341     <span class="comment">! Check proximity criterion for all blocks in this level and coarser levels</span>
<a name="l01342"></a>01342     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Doing proximity checks ...&quot;</span>   <span class="comment">! DEBUG</span>
<a name="l01343"></a>01343     call <a class="code" href="admesh_8f90.html#a5160d5783dcaa66aa71416b785554366">checkProximity</a>(ilev)
<a name="l01344"></a>01344 
<a name="l01345"></a>01345 <span class="comment">! DEBUG</span>
<a name="l01346"></a>01346 <span class="comment">!write(logu,*) &quot;         bID         flag&quot;</span>
<a name="l01347"></a>01347 <span class="comment">!do nb3=1,nbMaxGlobal</span>
<a name="l01348"></a>01348 <span class="comment">!  if (globalBlocks(nb3).ne.-1) then</span>
<a name="l01349"></a>01349 <span class="comment">!    write(logu,*) globalBlocks(nb3), refineFlags(nb3)</span>
<a name="l01350"></a>01350 <span class="comment">!  end if</span>
<a name="l01351"></a>01351 <span class="comment">!end do</span>
<a name="l01352"></a>01352 <span class="comment">! DEBUG</span>
<a name="l01353"></a>01353 
<a name="l01354"></a>01354  
<a name="l01355"></a>01355     <span class="comment">! Refine final list of local blocks</span>
<a name="l01356"></a>01356     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Refining local blocks ...&quot;</span>   <span class="comment">! DEBUG</span>
<a name="l01357"></a>01357     <span class="keyword">do</span> nb=<a class="code" href="namespaceglobals.html#aaa4990d5c014f5eea2e0e3db7a60b945">nbmin</a>,<a class="code" href="namespaceglobals.html#aff667ab18028ac06ebef01177716aff5">nbmax</a>
<a name="l01358"></a>01358       bID = <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb)
<a name="l01359"></a>01359       flag = <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>(nb)
<a name="l01360"></a>01360       <span class="keyword">if</span> (flag.eq.FLAG_REFINE) <span class="keyword">then</span>
<a name="l01361"></a>01361         call <a class="code" href="admesh_8f90.html#a2a567de448ee2ffc4338fa7276556fb1">refineBlock</a>(bID)
<a name="l01362"></a>01362       <span class="keyword">end if</span>
<a name="l01363"></a>01363     <span class="keyword">end do</span>    
<a name="l01364"></a>01364 
<a name="l01365"></a>01365     <span class="comment">! Update block registry</span>
<a name="l01366"></a>01366     <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Syncing block registry ...&quot;</span>
<a name="l01367"></a>01367     call <a class="code" href="admesh_8f90.html#a1b5b540f1a3ef74ebab213c629bd46ce">syncBlockLists </a>()
<a name="l01368"></a>01368 
<a name="l01369"></a>01369     <span class="comment">! Do load balance</span>
<a name="l01370"></a>01370     call <a class="code" href="loadbalance_8f90.html#a95f7a599739bb322fc5eaf755b54330d">loadBalance </a>()
<a name="l01371"></a>01371  
<a name="l01372"></a>01372     <span class="comment">! Done for this level - continue with next</span>
<a name="l01373"></a>01373   <span class="keyword">end do</span>
<a name="l01374"></a>01374 
<a name="l01375"></a>01375 
<a name="l01376"></a>01376 <span class="keyword">end subroutine refineZone</span>
<a name="l01377"></a>01377 
<a name="l01378"></a>01378 <span class="comment">!===============================================================================</span>
<a name="l01379"></a>01379 <span class="comment"></span>
<a name="l01380"></a>01380 !&gt; @brief Coarsens families of blacks into a single father block
<a name="l01381"></a>01381 !&gt; @details Determines which families (sets of siblings) are all set to be
<a name="l01382"></a>01382 !! coarsened, then does the coarsening.
<a name="l01383"></a><a class="code" href="admesh_8f90.html#a0b9479efda016cfde6b0926b4cbb77c2">01383</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a0b9479efda016cfde6b0926b4cbb77c2">coarseBlocks</a> ()
<a name="l01384"></a>01384 
<a name="l01385"></a>01385   use <span class="keywordflow">globals</span>
<a name="l01386"></a>01386   use <span class="keywordflow">parameters</span>
<a name="l01387"></a>01387   <span class="keyword">implicit none</span>
<a name="l01388"></a>01388 
<a name="l01389"></a>01389   <span class="keywordtype">integer</span> :: nb, nb1, bID, eID, sID, fID, fatherIndex, locIndx
<a name="l01390"></a>01390   <span class="keywordtype">integer</span> :: i, j, k, ip, jp, kp, i1, i2, j1, j2, k1, k2, sx, sy, sz
<a name="l01391"></a>01391   <span class="keywordtype">integer</span> :: next, flag, sib, sib_owner, elder_owner, ieq
<a name="l01392"></a>01392   <span class="keywordtype">integer</span> :: nData, ierr, mpi_status
<a name="l01393"></a>01393   <span class="keywordtype">integer</span> :: family (nbActive,2), sib_list(8), sib_indx(8)
<a name="l01394"></a>01394   <span class="keywordtype">real</span> :: buf(neqtot, ncells_x/2, ncells_y/2, ncells_z/2)
<a name="l01395"></a>01395   <span class="keywordtype">logical</span> :: counted
<a name="l01396"></a>01396 
<a name="l01397"></a>01397   <span class="comment">! 1. Build the list of families</span>
<a name="l01398"></a>01398   
<a name="l01399"></a>01399   <span class="comment">! Sweep refineFlags and add every block marked for coarseningto its family.</span>
<a name="l01400"></a>01400   <span class="comment">! The family array has the following meaning:</span>
<a name="l01401"></a>01401   <span class="comment">!  family(:,1) = bID of the elder block</span>
<a name="l01402"></a>01402   <span class="comment">!  family(:,2) = number of member of this family marked for coarsening</span>
<a name="l01403"></a>01403   family(:,1) = -1
<a name="l01404"></a>01404   family(:,2) = 0
<a name="l01405"></a>01405   next = 1
<a name="l01406"></a>01406   <span class="keyword">do</span> nb=1,<a class="code" href="namespaceparameters.html#a9956bfd2c200d8b3dd24e4294ed11770">nbMaxGlobal</a>
<a name="l01407"></a>01407     flag = <a class="code" href="namespaceglobals.html#a525acb142f62b84bf96dabc31dde5a30">refineFlags</a>(nb)
<a name="l01408"></a>01408     bID = <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb)
<a name="l01409"></a>01409     <span class="keyword">if</span> ((bID.ne.-1).and.(flag.eq.FLAG_COARSE)) <span class="keyword">then</span>
<a name="l01410"></a>01410 <span class="comment">! DEBUG</span>
<a name="l01411"></a>01411 <span class="comment">!write(logu,*) &quot;Block&quot;, bID, &quot;marked for coarsening&quot;</span>
<a name="l01412"></a>01412 <span class="comment">! DEBUG</span>
<a name="l01413"></a>01413       <span class="comment">! Obtain elder sibling ID</span>
<a name="l01414"></a>01414       call <a class="code" href="admesh_8f90.html#aefb084d06b41cc52ecb6c8e240ffc586">siblings </a>(bID, sib_list)
<a name="l01415"></a>01415       eID = sib_list(1)
<a name="l01416"></a>01416 <span class="comment">! DEBUG</span>
<a name="l01417"></a>01417 <span class="comment">!write(logu,*) &quot;Family of&quot;, bID, &quot;:&quot;, sib_list</span>
<a name="l01418"></a>01418 <span class="comment">! DEBUG</span>
<a name="l01419"></a>01419       <span class="comment">! Check if this family is already registered. If so, increase its count.</span>
<a name="l01420"></a>01420       counted = .false.
<a name="l01421"></a>01421       <span class="keyword">do</span> nb1=1,next-1
<a name="l01422"></a>01422         <span class="keyword">if</span> (family(nb1,1).eq.eID) <span class="keyword">then</span>
<a name="l01423"></a>01423 <span class="comment">! DEBUG</span>
<a name="l01424"></a>01424 <span class="comment">!write(logu,*) bID, &quot;&#39;s family exists; adding it&quot;</span>
<a name="l01425"></a>01425 <span class="comment">! DEBUG        </span>
<a name="l01426"></a>01426           family(nb1,2) = family(nb1,2) + 1
<a name="l01427"></a>01427           counted = .true.
<a name="l01428"></a>01428           exit
<a name="l01429"></a>01429         <span class="keyword">end if</span>
<a name="l01430"></a>01430       <span class="keyword">end do</span>
<a name="l01431"></a>01431 
<a name="l01432"></a>01432       <span class="comment">! If it&#39;s not, add it</span>
<a name="l01433"></a>01433       <span class="keyword">if</span> (.not.counted) <span class="keyword">then</span>
<a name="l01434"></a>01434         family(next,1) = eID
<a name="l01435"></a>01435         family(next,2) = 1
<a name="l01436"></a>01436         next = next + 1
<a name="l01437"></a>01437 <span class="comment">! DEBUG</span>
<a name="l01438"></a>01438 <span class="comment">!write(logu,*) bID, &quot;&#39;s family doesnt exist; adding new family&quot;</span>
<a name="l01439"></a>01439 <span class="comment">! DEBUG        </span>
<a name="l01440"></a>01440       <span class="keyword">end if</span>
<a name="l01441"></a>01441 
<a name="l01442"></a>01442     <span class="keyword">end if</span>
<a name="l01443"></a>01443   <span class="keyword">end do</span>
<a name="l01444"></a>01444 
<a name="l01445"></a>01445   <span class="comment">! 2. Apply coarsening for any family were all 8 siblings were marked</span>
<a name="l01446"></a>01446   
<a name="l01447"></a>01447   <span class="keyword">do</span> nb=1,nbActive
<a name="l01448"></a>01448     eID = family(nb,1)
<a name="l01449"></a>01449 <span class="comment">! DEBUG</span>
<a name="l01450"></a>01450 <span class="keyword">if</span> (eID.ne.-1) <span class="keyword">then</span>
<a name="l01451"></a>01451 <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Family of&quot;</span>, eID, <span class="stringliteral">&quot;has&quot;</span>, family(nb,2),<span class="stringliteral">&quot;members&quot;</span>
<a name="l01452"></a>01452 <span class="keyword">end if</span>
<a name="l01453"></a>01453 <span class="comment">! DEBUG</span>
<a name="l01454"></a>01454     <span class="comment">! Proceed if the family has 8 marked members</span>
<a name="l01455"></a>01455     <span class="keyword">if</span> ((eID.ne.-1).and.(family(nb,2).eq.8)) <span class="keyword">then</span>
<a name="l01456"></a>01456 <span class="comment">! DEBUG</span>
<a name="l01457"></a>01457 <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Coarsening family of block&quot;</span>, eID
<a name="l01458"></a>01458 <span class="comment">! DEBUG</span>
<a name="l01459"></a>01459       call <a class="code" href="admesh_8f90.html#a5423257f930e1a76bcf559ca03bf74c6">getOwner </a>(eID, elder_owner)
<a name="l01460"></a>01460       call <a class="code" href="admesh_8f90.html#aefb084d06b41cc52ecb6c8e240ffc586">siblings </a>(eID, sib_list)
<a name="l01461"></a>01461       call <a class="code" href="admesh_8f90.html#a2f828695825350cb25cf427b96489361">father </a>(eID, fID)
<a name="l01462"></a>01462 <span class="comment">! DEBUG</span>
<a name="l01463"></a>01463 <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Elder owner:&quot;</span>, elder_owner
<a name="l01464"></a>01464 <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;family:&quot;</span>, sib_list
<a name="l01465"></a>01465 <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;father&#39;s bID:&quot;</span>, fID
<a name="l01466"></a>01466 <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;rank, elder_owner:&quot;</span>, <a class="code" href="namespaceglobals.html#a93f283242b146b3ef8b53fd1b1ad7bac">rank</a>, elder_owner
<a name="l01467"></a>01467 <span class="comment">! DEBUG</span>
<a name="l01468"></a>01468       <span class="comment">! The owner of the elder sibling allocates space for the new father block</span>
<a name="l01469"></a>01469       <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#a93f283242b146b3ef8b53fd1b1ad7bac">rank</a>.eq.elder_owner) <span class="keyword">then</span>
<a name="l01470"></a>01470         call <a class="code" href="utils_8f90.html#aec9cad49729d0738dff671ae30ee440e">put </a>(fID, <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, <a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>, fatherIndex)
<a name="l01471"></a>01471         <span class="keyword">if</span> (fatherIndex.eq.-1) <span class="keyword">then</span>
<a name="l01472"></a>01472           <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l01473"></a>01473           <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a)&#39;</span>) <span class="stringliteral">&quot;Father block couldn&#39;t be assigned an empty slot!&quot;</span>
<a name="l01474"></a>01474           <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(a)&#39;</span>) <span class="stringliteral">&quot;***ABORTING!***&quot;</span>
<a name="l01475"></a>01475           stop
<a name="l01476"></a>01476         <span class="keyword">end if</span>
<a name="l01477"></a>01477 <span class="comment">! DEBUG</span>
<a name="l01478"></a>01478         <span class="keyword">if</span> ((fatherIndex.lt.1).or.(fatherIndex.gt.<a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>)) <span class="keyword">then</span>
<a name="l01479"></a>01479           <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Invalid fatherIndex returned!&quot;</span>
<a name="l01480"></a>01480           <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;fatherIndex:&quot;</span>, fatherIndex
<a name="l01481"></a>01481           <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;***ABORTING!***&quot;</span>
<a name="l01482"></a>01482           stop
<a name="l01483"></a>01483         <span class="keyword">end if</span>
<a name="l01484"></a>01484 <span class="comment">! DEBUG</span>
<a name="l01485"></a>01485       <span class="keyword">end if</span>
<a name="l01486"></a>01486 
<a name="l01487"></a>01487       <span class="comment">! Now copy the data of each sibling into the father&#39;s data space</span>
<a name="l01488"></a>01488       <span class="comment">! The siblings might be local or on another process&#39; memory</span>
<a name="l01489"></a>01489       <span class="keyword">do</span> sib=1,8
<a name="l01490"></a>01490         sID = sib_list(sib)
<a name="l01491"></a>01491         call <a class="code" href="admesh_8f90.html#a5423257f930e1a76bcf559ca03bf74c6">getOwner </a>(sID, sib_owner)
<a name="l01492"></a>01492 <span class="comment">! DEBUG</span>
<a name="l01493"></a>01493 <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Sibling&quot;</span>, sID, <span class="stringliteral">&quot;is owned by&quot;</span>, sib_owner
<a name="l01494"></a>01494 <span class="comment">! DEBUG</span>
<a name="l01495"></a>01495         <span class="comment">! SENDER-side operations</span>
<a name="l01496"></a>01496 
<a name="l01497"></a>01497         <span class="comment">! If rank owns this sibling but does not own the elder, average</span>
<a name="l01498"></a>01498         <span class="comment">! the sibling&#39;s data and send it through MPI to the elder&#39;s owner</span>
<a name="l01499"></a>01499         <span class="keyword">if</span> ((<a class="code" href="namespaceglobals.html#a93f283242b146b3ef8b53fd1b1ad7bac">rank</a>.ne.elder_owner).and.(<a class="code" href="namespaceglobals.html#a93f283242b146b3ef8b53fd1b1ad7bac">rank</a>.eq.sib_owner)) <span class="keyword">then</span>
<a name="l01500"></a>01500 
<a name="l01501"></a>01501           <span class="comment">! Average sibling&#39;s data into buffer</span>
<a name="l01502"></a>01502           call <a class="code" href="utils_8f90.html#a2f2f03814c3471b9a0797e2f03655c68">find </a>(sID, <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, <a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>, locIndx)
<a name="l01503"></a>01503           <span class="keyword">do</span> i=1,ncells_x/2
<a name="l01504"></a>01504             <span class="keyword">do</span> j=1,ncells_y/2
<a name="l01505"></a>01505               <span class="keyword">do</span> k=1,ncells_z/2
<a name="l01506"></a>01506                 ip = i*2-1
<a name="l01507"></a>01507                 jp = j*2-1
<a name="l01508"></a>01508                 kp = k*2-1
<a name="l01509"></a>01509                 <span class="keyword">do</span> ieq=1,neqtot
<a name="l01510"></a>01510                   buf(ieq,i,j,k) = sum( <a class="code" href="namespaceglobals.html#a582706020cbc63411a5564cc9a01436f">U</a>(locIndx,ieq,ip:ip+1,jp:jp+1,kp:kp+1) ) / 8.0
<a name="l01511"></a>01511                 <span class="keyword">end do</span>
<a name="l01512"></a>01512               <span class="keyword">end do</span>
<a name="l01513"></a>01513             <span class="keyword">end do</span>
<a name="l01514"></a>01514           <span class="keyword">end do</span>
<a name="l01515"></a>01515 
<a name="l01516"></a>01516           <span class="comment">! Send average data through MPI</span>
<a name="l01517"></a>01517           nData = neqtot*(ncells_x/2)*(ncells_y/2)*(ncells_z/2)
<a name="l01518"></a>01518           call MPI_SEND ( buf, nData, mpi_real_kind, elder_owner, sID, &amp;
<a name="l01519"></a>01519             mpi_comm_world, ierr)
<a name="l01520"></a>01520 <span class="comment">! DEBUG</span>
<a name="l01521"></a>01521 <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Sent&quot;</span>, nData, <span class="stringliteral">&quot;values to process&quot;</span>, elder_owner
<a name="l01522"></a>01522 <span class="comment">! DEBUG</span>
<a name="l01523"></a>01523           <span class="comment">! Free this sibling&#39;s local slot</span>
<a name="l01524"></a>01524           call <a class="code" href="utils_8f90.html#ab0782bde2957c52acedc20b2b594f7de">pop </a>(sID, <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, <a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>, nb1)
<a name="l01525"></a>01525 
<a name="l01526"></a>01526         <span class="keyword">end if</span>
<a name="l01527"></a>01527 
<a name="l01528"></a>01528         <span class="comment">! RECEIVER-side operations</span>
<a name="l01529"></a>01529 
<a name="l01530"></a>01530         <span class="comment">! The owner of the elder sibling either receives this sibling&#39;s data</span>
<a name="l01531"></a>01531         <span class="comment">! through MPI ...</span>
<a name="l01532"></a>01532         <span class="keyword">if</span> ((<a class="code" href="namespaceglobals.html#a93f283242b146b3ef8b53fd1b1ad7bac">rank</a>.eq.elder_owner).and.(<a class="code" href="namespaceglobals.html#a93f283242b146b3ef8b53fd1b1ad7bac">rank</a>.ne.sib_owner)) <span class="keyword">then</span>
<a name="l01533"></a>01533 
<a name="l01534"></a>01534           <span class="comment">! Received MPI data into appropriate memory space</span>
<a name="l01535"></a>01535           call <a class="code" href="admesh_8f90.html#a5b56f8f8fd532b838ccd6a38f356ac8a">siblingCoords </a>(sID, sx, sy, sz)
<a name="l01536"></a>01536           i1 = 1 + ncells_x/2*sx
<a name="l01537"></a>01537           i2 = ncells_x/2*(1+sx)
<a name="l01538"></a>01538           j1 = 1 + ncells_y/2*sy
<a name="l01539"></a>01539           j2 = ncells_y/2*(1+sy)
<a name="l01540"></a>01540           k1 = 1 + ncells_z/2*sz
<a name="l01541"></a>01541           k2 = ncells_z/2*(1+sz)
<a name="l01542"></a>01542           nData = neqtot*(i2-i1+1)*(j2-j1+1)*(k2-k1+1)
<a name="l01543"></a>01543           call MPI_RECV ( <a class="code" href="namespaceglobals.html#a582706020cbc63411a5564cc9a01436f">U</a>(fatherIndex, 1:neqtot, i1:i2, j1:j2, k1:k2), nData, &amp;
<a name="l01544"></a>01544             mpi_real_kind, sib_owner, sID, mpi_comm_world, mpi_status, ierr)
<a name="l01545"></a>01545 <span class="comment">! DEBUG</span>
<a name="l01546"></a>01546 <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Received&quot;</span>, nData, <span class="stringliteral">&quot;values into local space&quot;</span>, i1,i2,j1,j2,k1,k2
<a name="l01547"></a>01547 <span class="comment">! DEBUG</span>
<a name="l01548"></a>01548 
<a name="l01549"></a>01549         <span class="comment">! ... or averages and copies it directly from local memory</span>
<a name="l01550"></a>01550         <span class="keyword">else</span> <span class="keyword">if</span> ((<a class="code" href="namespaceglobals.html#a93f283242b146b3ef8b53fd1b1ad7bac">rank</a>.eq.elder_owner).and.(<a class="code" href="namespaceglobals.html#a93f283242b146b3ef8b53fd1b1ad7bac">rank</a>.eq.sib_owner)) <span class="keyword">then</span>
<a name="l01551"></a>01551 
<a name="l01552"></a>01552           call <a class="code" href="admesh_8f90.html#a5b56f8f8fd532b838ccd6a38f356ac8a">siblingCoords </a>(sID, sx, sy, sz)
<a name="l01553"></a>01553           call <a class="code" href="utils_8f90.html#a2f2f03814c3471b9a0797e2f03655c68">find </a>(sID, <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, <a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>, locIndx)
<a name="l01554"></a>01554           <span class="keyword">do</span> i=1,ncells_x/2
<a name="l01555"></a>01555             <span class="keyword">do</span> j=1,ncells_y/2
<a name="l01556"></a>01556               <span class="keyword">do</span> k=1,ncells_z/2
<a name="l01557"></a>01557                 i1 = i*2-1
<a name="l01558"></a>01558                 j1 = j*2-1
<a name="l01559"></a>01559                 k1 = k*2-1
<a name="l01560"></a>01560                 ip = i + sx*ncells_x/2
<a name="l01561"></a>01561                 jp = j + sy*ncells_y/2
<a name="l01562"></a>01562                 kp = k + sz*ncells_z/2
<a name="l01563"></a>01563                 <span class="keyword">do</span> ieq=1,neqtot
<a name="l01564"></a>01564 <span class="comment">! DEBUG</span>
<a name="l01565"></a>01565                 <span class="keyword">if</span> ((fatherIndex.lt.1).or.(fatherIndex.gt.<a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>)) <span class="keyword">then</span>
<a name="l01566"></a>01566                   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;invalid fatherIndex !!&quot;</span>
<a name="l01567"></a>01567                   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;fatherIndex=&quot;</span>, fatherIndex
<a name="l01568"></a>01568                   stop
<a name="l01569"></a>01569                 <span class="keyword">end if</span>
<a name="l01570"></a>01570                 <span class="keyword">if</span> (locIndx.eq.0) <span class="keyword">then</span>
<a name="l01571"></a>01571                   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;locIndx = 0 !!&quot;</span>
<a name="l01572"></a>01572                   stop
<a name="l01573"></a>01573                 <span class="keyword">end if</span>
<a name="l01574"></a>01574 <span class="comment">! DEBUG</span>
<a name="l01575"></a>01575                   <a class="code" href="namespaceglobals.html#a582706020cbc63411a5564cc9a01436f">U</a>(fatherIndex,ieq,ip,jp,kp) = sum( <a class="code" href="namespaceglobals.html#a582706020cbc63411a5564cc9a01436f">U</a>(locIndx,ieq,i1:i1+1,j1:j1+1,k1:k1+1) ) / 8.0
<a name="l01576"></a>01576                 <span class="keyword">end do</span>
<a name="l01577"></a>01577               <span class="keyword">end do</span>
<a name="l01578"></a>01578             <span class="keyword">end do</span>
<a name="l01579"></a>01579           <span class="keyword">end do</span>
<a name="l01580"></a>01580 <span class="comment">! DEBUG</span>
<a name="l01581"></a>01581 <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Averaged and copied local data&quot;</span>
<a name="l01582"></a>01582 <span class="comment">! DEBUG</span>
<a name="l01583"></a>01583           <span class="comment">! Free this sibling&#39;s local slot</span>
<a name="l01584"></a>01584           call <a class="code" href="utils_8f90.html#ab0782bde2957c52acedc20b2b594f7de">pop </a>(sID, <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, <a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>, nb1)
<a name="l01585"></a>01585 
<a name="l01586"></a>01586         <span class="keyword">end if</span>
<a name="l01587"></a>01587       <span class="keyword">end do</span>
<a name="l01588"></a>01588 
<a name="l01589"></a>01589     <span class="keyword">end if</span>
<a name="l01590"></a>01590   <span class="keyword">end do</span>
<a name="l01591"></a>01591 
<a name="l01592"></a>01592   
<a name="l01593"></a>01593 
<a name="l01594"></a>01594 <span class="keyword">end subroutine coarseBlocks</span>
<a name="l01595"></a>01595 
<a name="l01596"></a>01596 <span class="comment">!===============================================================================</span>
<a name="l01597"></a>01597 <span class="comment"></span>
<a name="l01598"></a>01598 !&gt; @brief Returns whether the cell coordinates are invalid
<a name="l01599"></a>01599 !&gt; @details A cell is considered invalid if:
<a name="l01600"></a>01600 !! a) At least one of its indices exceeds the ranges of physical+ghost cells
<a name="l01601"></a>01601 !! b) At least two of its indices are in ghost cell range
<a name="l01602"></a><a class="code" href="admesh_8f90.html#a65c3f5a6ddbc9bc13aa5ca47284166cd">01602</a> <span class="keyword">subroutine </span><a class="code" href="admesh_8f90.html#a65c3f5a6ddbc9bc13aa5ca47284166cd">validCell</a> (i, j, k, isValid)
<a name="l01603"></a>01603 
<a name="l01604"></a>01604   use <span class="keywordflow">parameters</span>
<a name="l01605"></a>01605   <span class="keyword">implicit none</span>
<a name="l01606"></a>01606 
<a name="l01607"></a>01607   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: i
<a name="l01608"></a>01608   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: j
<a name="l01609"></a>01609   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: k
<a name="l01610"></a>01610   <span class="keywordtype">logical</span>, <span class="keywordtype">intent(out)</span> :: isValid
<a name="l01611"></a>01611 
<a name="l01612"></a>01612   <span class="keywordtype">integer</span> :: counter
<a name="l01613"></a>01613   
<a name="l01614"></a>01614   <span class="keyword">if</span> ((i.lt.<a class="code" href="namespaceparameters.html#aeabb24541784029563e995c43ad53cbb">nxmin</a>).or.(i.gt.<a class="code" href="namespaceparameters.html#a95ba20e75d088a1a7e44cba35b8b5d35">nxmax</a>).or.   &amp;
<a name="l01615"></a>01615       (j.lt.<a class="code" href="namespaceparameters.html#ad282ff0c74d4bb81ee68cfc10d5d87f7">nymin</a>).or.(j.gt.<a class="code" href="namespaceparameters.html#a98622e7e54b181bad682ae047fb70d13">nymax</a>).or.   &amp;
<a name="l01616"></a>01616       (k.lt.<a class="code" href="namespaceparameters.html#af29e4054c757de70f8181dad0de0a8a2">nzmin</a>).or.(k.gt.<a class="code" href="namespaceparameters.html#ae4d53638bdd5c1eef3c3c464a857d861">nzmax</a>)) <span class="keyword">then</span>
<a name="l01617"></a>01617     isValid = .false.
<a name="l01618"></a>01618     return
<a name="l01619"></a>01619   <span class="keyword">end if</span>
<a name="l01620"></a>01620 
<a name="l01621"></a>01621   counter = 0
<a name="l01622"></a>01622   <span class="keyword">if</span> ((i.lt.1).or.(i.gt.<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a>)) counter = counter + 1
<a name="l01623"></a>01623   <span class="keyword">if</span> ((j.lt.1).or.(j.gt.<a class="code" href="namespaceparameters.html#aa52d0561bd220fc5f155b7d1932d8f1d">ncells_y</a>)) counter = counter + 1
<a name="l01624"></a>01624   <span class="keyword">if</span> ((k.lt.1).or.(k.gt.<a class="code" href="namespaceparameters.html#a568fe0267a053f4e31fc851dba5a1ede">ncells_z</a>)) counter = counter + 1  
<a name="l01625"></a>01625   <span class="keyword">if</span> (counter.le.1) <span class="keyword">then</span>
<a name="l01626"></a>01626     isValid = .true.
<a name="l01627"></a>01627   <span class="keyword">else</span>
<a name="l01628"></a>01628     isValid = .false.
<a name="l01629"></a>01629   <span class="keyword">end if</span>
<a name="l01630"></a>01630 
<a name="l01631"></a>01631 <span class="keyword">end subroutine</span>
</pre></div></div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Variables</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address style="text-align: right;"><small>Generated on Thu Jun 7 13:53:13 2012 for Walicxe3D by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
