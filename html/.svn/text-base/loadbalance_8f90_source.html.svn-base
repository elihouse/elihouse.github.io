<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Walicxe3D: source/loadbalance.f90 Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.html"><span>Modules</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>source/loadbalance.f90</h1><a href="loadbalance_8f90.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">!===============================================================================</span><span class="comment"></span>
<a name="l00002"></a>00002 !&gt; @file loadbalance.f90
<a name="l00003"></a>00003 !&gt; @brief Parallel execution load balancing
<a name="l00004"></a>00004 !&gt; @author Juan C. Toledo
<a name="l00005"></a>00005 !&gt; @date 13/Jan/2012
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="comment">! Copyright (c) 2012 Alejandro Esquivel and Juan C. Toledo</span>
<a name="l00008"></a>00008 <span class="comment">!</span>
<a name="l00009"></a>00009 <span class="comment">! This file is part of Walicxe3D.</span>
<a name="l00010"></a>00010 <span class="comment">!</span>
<a name="l00011"></a>00011 <span class="comment">! Walicxe3D is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">! it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">! the Free Software Foundation; either version 3 of the License, or</span>
<a name="l00014"></a>00014 <span class="comment">! (at your option) any later version.</span>
<a name="l00015"></a>00015 <span class="comment">!</span>
<a name="l00016"></a>00016 <span class="comment">! This program is distributed in the hope that it will be useful,</span>
<a name="l00017"></a>00017 <span class="comment">! but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00018"></a>00018 <span class="comment">! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
<a name="l00019"></a>00019 <span class="comment">! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>
<a name="l00020"></a>00020 <span class="comment">! GNU General Public License for more details.</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">! You should have received a copy of the GNU General Public License</span>
<a name="l00023"></a>00023 <span class="comment">! along with this program.  If not, see http://www.gnu.org/licenses/.</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="comment">!===============================================================================</span>
<a name="l00026"></a>00026 <span class="comment"></span>
<a name="l00027"></a>00027 !&gt; @brief High-level routine that performs load balancing among all processes
<a name="l00028"></a>00028 !&gt; @details Redistributes the blocks among all processes, with the purpose of
<a name="l00029"></a>00029 !! balancing the load. This is the high-level wrapper subroutine, intended
<a name="l00030"></a>00030 !! to be called by the main program.
<a name="l00031"></a><a class="code" href="loadbalance_8f90.html#a95f7a599739bb322fc5eaf755b54330d">00031</a> <span class="keyword">subroutine </span><a class="code" href="loadbalance_8f90.html#a95f7a599739bb322fc5eaf755b54330d">loadBalance</a> ()
<a name="l00032"></a>00032 
<a name="l00033"></a>00033   use <span class="keywordflow">parameters</span>
<a name="l00034"></a>00034   use <span class="keywordflow">globals</span>
<a name="l00035"></a>00035   use <span class="keywordflow">tictoc</span>
<a name="l00036"></a>00036   <span class="keyword">implicit none</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038   <span class="keywordtype">integer</span> :: loadOrder(nbMaxGlobal)
<a name="l00039"></a>00039   <span class="keywordtype">integer</span> :: ierr, mark
<a name="l00040"></a>00040   <span class="keywordtype">integer</span> :: nb  <span class="comment">! DEBUG</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042   call <a class="code" href="namespacetictoc.html#ab092f042aab35f2f6928c7b2f073b116">tic</a>(mark)
<a name="l00043"></a>00043   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00044"></a>00044   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a)&#39;</span>) <span class="stringliteral">&quot;============================================&quot;</span>
<a name="l00045"></a>00045   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a)&#39;</span>) <span class="stringliteral">&quot; Performing Load Balance ...&quot;</span>
<a name="l00046"></a>00046   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a)&#39;</span>) <span class="stringliteral">&quot;============================================&quot;</span>
<a name="l00047"></a>00047   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00048"></a>00048  
<a name="l00049"></a>00049   <span class="comment">! Build ordered list of blocks according to loadbalancing scheme</span>
<a name="l00050"></a>00050   loadOrder(:) = -1
<a name="l00051"></a>00051   call <a class="code" href="loadbalance_8f90.html#a2812997e51cdd892c6af392322fc8655">HilbertOrder </a>(loadOrder)
<a name="l00052"></a>00052 
<a name="l00053"></a>00053   <span class="comment">! Distribute load according to the calculated loadOrder list</span>
<a name="l00054"></a>00054   call <a class="code" href="loadbalance_8f90.html#adc0c233238d1086f44c9b3157e8ded8a">doBalance </a>(loadOrder)
<a name="l00055"></a>00055 
<a name="l00056"></a>00056   <span class="comment">! Done</span>
<a name="l00057"></a>00057   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00058"></a>00058   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a,a)&#39;</span>) <span class="stringliteral">&quot;&gt; Load balance completed in &quot;</span>, <a class="code" href="namespacetictoc.html#a442a0695f535a607445218030cec1fa0">nicetoc</a>(mark)
<a name="l00059"></a>00059   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;&quot;</span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="keyword">end subroutine loadBalance</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="comment">!===============================================================================</span>
<a name="l00064"></a>00064 <span class="comment"></span>
<a name="l00065"></a>00065 !&gt; @brief Performs the actual load balancing
<a name="l00066"></a>00066 !&gt; @details Uses the loadOrder list to transfer block data and block ownership
<a name="l00067"></a>00067 !! between processes. The loadScheme array contains a list of all the active
<a name="l00068"></a>00068 !! blocks and the current and new owner for each block
<a name="l00069"></a>00069 !&gt; @param loadOrder The load-balanced ordered list of active blocks bIDs
<a name="l00070"></a><a class="code" href="loadbalance_8f90.html#adc0c233238d1086f44c9b3157e8ded8a">00070</a> <span class="keyword">subroutine </span><a class="code" href="loadbalance_8f90.html#adc0c233238d1086f44c9b3157e8ded8a">doBalance</a> (loadOrder)
<a name="l00071"></a>00071 
<a name="l00072"></a>00072   use <span class="keywordflow">parameters</span>
<a name="l00073"></a>00073   use <span class="keywordflow">globals</span>
<a name="l00074"></a>00074   use <span class="keywordflow">tictoc</span>
<a name="l00075"></a>00075   <span class="keyword">implicit none</span>
<a name="l00076"></a>00076 
<a name="l00077"></a>00077   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: loadOrder(nbMaxGlobal)
<a name="l00078"></a>00078 
<a name="l00079"></a>00079   <span class="keywordtype">integer</span> :: numBlocks(0:nProcs-1)
<a name="l00080"></a>00080   <span class="keywordtype">integer</span> :: loadScheme(nbActive, 3), tots(nProcs)
<a name="l00081"></a>00081   <span class="keywordtype">integer</span> :: nb, nbloc, p, c, first, last, bID, nData
<a name="l00082"></a>00082   <span class="keywordtype">integer</span> :: old_owner, new_owner, blocks
<a name="l00083"></a>00083   <span class="keywordtype">integer</span> :: mpi_status(MPI_STATUS_SIZE), ierr
<a name="l00084"></a>00084   <span class="keywordtype">integer</span> :: mark
<a name="l00085"></a>00085   <span class="keywordtype">integer</span> :: sent, received   <span class="comment">! DEBUG</span>
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   <span class="comment">! The goal is to build and apply the new load balancing scheme, which is</span>
<a name="l00088"></a>00088   <span class="comment">! containted in the loadScheme array. Its structure is:</span>
<a name="l00089"></a>00089   <span class="comment">!   loadScheme(:,1) = block&#39;s bID</span>
<a name="l00090"></a>00090   <span class="comment">!   loadScheme(:,2) = block&#39;s current owner</span>
<a name="l00091"></a>00091   <span class="comment">!   loadScheme(:,3) = block&#39;s new owner</span>
<a name="l00092"></a>00092   <span class="comment">! After it&#39;s been built, it is used walked one entry at a time to transfer</span>
<a name="l00093"></a>00093   <span class="comment">! blocks between processes</span>
<a name="l00094"></a>00094 
<a name="l00095"></a>00095   call <a class="code" href="namespacetictoc.html#ab092f042aab35f2f6928c7b2f073b116">tic</a>(mark)
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   <span class="comment">! Determine how many blocks each process gets. Process 0 is assigned last.</span>
<a name="l00098"></a>00098   numBlocks(:) = floor(<span class="keywordtype">real</span>(nbActive)/nProcs)
<a name="l00099"></a>00099   <span class="keyword">do</span> nb=1,mod(nbActive,nProcs)
<a name="l00100"></a>00100     p = mod(nb,nProcs)
<a name="l00101"></a>00101     numBlocks(p) = numBlocks(p) + 1
<a name="l00102"></a>00102   <span class="keyword">end do</span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104   <span class="comment">! Initialize the loadScheme list using loadOrder and the current owner</span>
<a name="l00105"></a>00105   c = 1
<a name="l00106"></a>00106   <span class="keyword">do</span> nb=1,nbMaxGlobal
<a name="l00107"></a>00107     <span class="keyword">if</span> (loadOrder(nb).ne.-1) <span class="keyword">then</span>
<a name="l00108"></a>00108       bID = loadOrder(nb)
<a name="l00109"></a>00109       call <a class="code" href="admesh_8f90.html#a5423257f930e1a76bcf559ca03bf74c6">getOwner </a>(bID, old_owner)
<a name="l00110"></a>00110       loadScheme(c,1) = bID
<a name="l00111"></a>00111       loadScheme(c,2) = old_owner
<a name="l00112"></a>00112       loadScheme(c,3) = -1
<a name="l00113"></a>00113       c = c + 1
<a name="l00114"></a>00114     <span class="keyword">end if</span>
<a name="l00115"></a>00115   <span class="keyword">end do</span>
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="comment">! Build the new loadScheme</span>
<a name="l00118"></a>00118   nb = 1
<a name="l00119"></a>00119   <span class="keyword">do</span> p=0,nProcs-1
<a name="l00120"></a>00120     blocks = numBlocks(p)
<a name="l00121"></a>00121     <span class="keyword">do</span> c=1,blocks
<a name="l00122"></a>00122       loadScheme(nb,3) = p
<a name="l00123"></a>00123       nb = nb + 1
<a name="l00124"></a>00124     <span class="keyword">end do</span>
<a name="l00125"></a>00125   <span class="keyword">end do</span>
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="comment">! DEBUG</span>
<a name="l00128"></a>00128   <span class="comment">! Report the loadScheme</span>
<a name="l00129"></a>00129 <span class="comment">!  write(logu,&#39;(1x,a)&#39;) &quot;The new load scheme is:&quot;</span>
<a name="l00130"></a>00130 <span class="comment">!  write(logu,&#39;(6x,a)&#39;) &quot;bID   old owner  -&gt;   new owner&quot;</span>
<a name="l00131"></a>00131   tots(:) = 0
<a name="l00132"></a>00132   <span class="keyword">do</span> nb=1,nbActive
<a name="l00133"></a>00133     bID = loadScheme(nb,1)
<a name="l00134"></a>00134     old_owner = loadScheme(nb,2)
<a name="l00135"></a>00135     new_owner = loadScheme(nb,3)
<a name="l00136"></a>00136 <span class="comment">!    write(logu,&#39;(1x,i8,i8,6x,a,i8)&#39;) bID, old_owner, &quot;-&gt;&quot;, new_owner</span>
<a name="l00137"></a>00137     tots(new_owner+1) = tots(new_owner+1) + 1
<a name="l00138"></a>00138   <span class="keyword">end do</span>
<a name="l00139"></a>00139 <span class="comment">!  write(logu,&#39;(1x,a)&#39;) &quot;Summary:&quot;</span>
<a name="l00140"></a>00140   <span class="keyword">do</span> p=0,nProcs-1
<a name="l00141"></a>00141 <span class="comment">!    write(logu,&#39;(2x,a,i8,a,i4,a)&#39;) &quot;Process &quot;, p, &quot; gets &quot;, tots(p+1), &quot; blocks&quot;</span>
<a name="l00142"></a>00142   <span class="keyword">end do</span>
<a name="l00143"></a>00143 <span class="comment">! DEBUG  </span>
<a name="l00144"></a>00144 
<a name="l00145"></a>00145   <span class="comment">! Everybody stop here</span>
<a name="l00146"></a>00146   call mpi_barrier (mpi_comm_world, ierr)
<a name="l00147"></a>00147 
<a name="l00148"></a>00148   <span class="comment">! DEBUG</span>
<a name="l00149"></a>00149 <span class="comment">!  write(logu,*) &quot;There are&quot;, nbActive, &quot;blocks globally&quot;</span>
<a name="l00150"></a>00150 <span class="comment">!  write(logu,*) &quot;I have&quot;, nbLocal, &quot;local blocks&quot;</span>
<a name="l00151"></a>00151   sent = 0
<a name="l00152"></a>00152   received = 0
<a name="l00153"></a>00153   <span class="comment">! DEBUG</span>
<a name="l00154"></a>00154 
<a name="l00155"></a>00155   <span class="comment">! Finally, distribute the blocks via MPI messages</span>
<a name="l00156"></a>00156   <span class="comment">!</span>
<a name="l00157"></a>00157   <span class="comment">! For every block, compare current and new owner.</span>
<a name="l00158"></a>00158   <span class="comment">! Then, one of four things will happen:</span>
<a name="l00159"></a>00159   <span class="comment">! 1) if the old owner is also the new owner, ignore this entry</span>
<a name="l00160"></a>00160   <span class="comment">!   (this block doesn&#39;t change process)</span>
<a name="l00161"></a>00161   <span class="comment">! 2) if they are different, but neither is my rank, ignore this entry</span>
<a name="l00162"></a>00162   <span class="comment">!   (I&#39;m not involved in this exchange)</span>
<a name="l00163"></a>00163   <span class="comment">! 3) if they are different, and I&#39;m the old owner, MPI_SEND the block to</span>
<a name="l00164"></a>00164   <span class="comment">!    the new owner</span>
<a name="l00165"></a>00165   <span class="comment">! 4) if they are different, and I&#39;m the new owner, MPI_RECV the block from</span>
<a name="l00166"></a>00166   <span class="comment">!    the old owner</span>
<a name="l00167"></a>00167   call <a class="code" href="namespacetictoc.html#ab092f042aab35f2f6928c7b2f073b116">tic</a>(mark)
<a name="l00168"></a>00168   <span class="keyword">do</span> nb=1,nbActive
<a name="l00169"></a>00169 
<a name="l00170"></a>00170     bID = loadScheme(nb,1)
<a name="l00171"></a>00171     old_owner = loadScheme(nb,2)
<a name="l00172"></a>00172     new_owner = loadScheme(nb,3)
<a name="l00173"></a>00173 
<a name="l00174"></a>00174     <span class="keyword">if</span> (old_owner.ne.new_owner) <span class="keyword">then</span>
<a name="l00175"></a>00175       <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#a93f283242b146b3ef8b53fd1b1ad7bac">rank</a>.eq.old_owner) <span class="keyword">then</span>
<a name="l00176"></a>00176 
<a name="l00177"></a>00177         <span class="comment">! Transmit this block (flow variables on physical cells)</span>
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         call <a class="code" href="utils_8f90.html#a2f2f03814c3471b9a0797e2f03655c68">find </a>(bID, <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, <a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>, nbloc)
<a name="l00180"></a>00180         <span class="keyword">if</span> (nbloc.eq.-1) <span class="keyword">then</span>
<a name="l00181"></a>00181           <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Couldn&#39;t find bID&quot;</span>, bID, <span class="stringliteral">&quot;in local list!!&quot;</span>
<a name="l00182"></a>00182           <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;***ABORTING!***&quot;</span>
<a name="l00183"></a>00183           stop
<a name="l00184"></a>00184         <span class="keyword">end if</span>
<a name="l00185"></a>00185         
<a name="l00186"></a>00186 <span class="comment">!        write(logu,&#39;(1x,a,i8,a,i4,a,i4)&#39;) &quot;Transmitting block &quot;, bID, &amp;</span>
<a name="l00187"></a>00187 <span class="comment">!          &quot; with local index &quot;, nbloc, &quot; to process &quot;, new_owner</span>
<a name="l00188"></a>00188         nData = <a class="code" href="namespaceparameters.html#a387f7be3c360ee28f921415cd15ae162">neqtot</a>*<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a>*<a class="code" href="namespaceparameters.html#aa52d0561bd220fc5f155b7d1932d8f1d">ncells_y</a>*<a class="code" href="namespaceparameters.html#a568fe0267a053f4e31fc851dba5a1ede">ncells_z</a>
<a name="l00189"></a>00189         call MPI_SEND ( <a class="code" href="namespaceglobals.html#a582706020cbc63411a5564cc9a01436f">U</a>(nbloc, 1:<a class="code" href="namespaceparameters.html#a387f7be3c360ee28f921415cd15ae162">neqtot</a>, 1:<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a>, 1:<a class="code" href="namespaceparameters.html#aa52d0561bd220fc5f155b7d1932d8f1d">ncells_y</a>, 1:<a class="code" href="namespaceparameters.html#a568fe0267a053f4e31fc851dba5a1ede">ncells_z</a>), &amp;
<a name="l00190"></a>00190              nData, mpi_real_kind, new_owner, bID, mpi_comm_world, ierr)
<a name="l00191"></a>00191         <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>(nbloc) = -1
<a name="l00192"></a>00192 
<a name="l00193"></a>00193         <span class="comment">! DEBUG</span>
<a name="l00194"></a>00194         sent = sent + 1
<a name="l00195"></a>00195         <span class="comment">! DEBUG</span>
<a name="l00196"></a>00196         
<a name="l00197"></a>00197       <span class="keyword">else</span> <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#a93f283242b146b3ef8b53fd1b1ad7bac">rank</a>.eq.new_owner) <span class="keyword">then</span>
<a name="l00198"></a>00198 
<a name="l00199"></a>00199         <span class="comment">! Receive this block (flow variables on physical cells)</span>
<a name="l00200"></a>00200         call <a class="code" href="utils_8f90.html#a2f2f03814c3471b9a0797e2f03655c68">find </a>(-1, <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>, <a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>, nbloc)        
<a name="l00201"></a>00201         <span class="keyword">if</span> (nbloc.eq.-1) <span class="keyword">then</span>
<a name="l00202"></a>00202           <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;Couldn&#39;t find a free local slot!&quot;</span>
<a name="l00203"></a>00203           <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,*) <span class="stringliteral">&quot;***ABORTING!***&quot;</span>
<a name="l00204"></a>00204           stop
<a name="l00205"></a>00205         <span class="keyword">end if</span>
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 <span class="comment">!        write(logu,&#39;(1x,a,i8,a,i4,a,i4)&#39;) &quot;Receiving block &quot;, bID, &amp;</span>
<a name="l00208"></a>00208 <span class="comment">!          &quot; into free local index &quot;, nbloc, &quot; from process &quot;, old_owner</span>
<a name="l00209"></a>00209         nData = <a class="code" href="namespaceparameters.html#a387f7be3c360ee28f921415cd15ae162">neqtot</a>*<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a>*<a class="code" href="namespaceparameters.html#aa52d0561bd220fc5f155b7d1932d8f1d">ncells_y</a>*<a class="code" href="namespaceparameters.html#a568fe0267a053f4e31fc851dba5a1ede">ncells_z</a>
<a name="l00210"></a>00210         call MPI_RECV ( <a class="code" href="namespaceglobals.html#a582706020cbc63411a5564cc9a01436f">U</a>(nbloc, 1:<a class="code" href="namespaceparameters.html#a387f7be3c360ee28f921415cd15ae162">neqtot</a>, 1:<a class="code" href="namespaceparameters.html#ad032cf1de9e7d232d045a52ece9eae4b">ncells_x</a>, 1:<a class="code" href="namespaceparameters.html#aa52d0561bd220fc5f155b7d1932d8f1d">ncells_y</a>, 1:<a class="code" href="namespaceparameters.html#a568fe0267a053f4e31fc851dba5a1ede">ncells_z</a>), &amp;
<a name="l00211"></a>00211              nData, mpi_real_kind, old_owner, bID, mpi_comm_world, mpi_status, ierr)
<a name="l00212"></a>00212         <a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>(nbloc) = bID
<a name="l00213"></a>00213 
<a name="l00214"></a>00214         <span class="comment">! DEBUG</span>
<a name="l00215"></a>00215         received = received + 1
<a name="l00216"></a>00216         <span class="comment">! DEBUG</span>
<a name="l00217"></a>00217    
<a name="l00218"></a>00218       <span class="keyword">end if</span>
<a name="l00219"></a>00219     <span class="keyword">end if</span>
<a name="l00220"></a>00220 
<a name="l00221"></a>00221   <span class="keyword">end do</span>
<a name="l00222"></a>00222   
<a name="l00223"></a>00223   <span class="comment">! DEBUG</span>
<a name="l00224"></a>00224 <span class="comment">!  write(logu,*) &quot;toActivate and toDeactivate lists:&quot;</span>
<a name="l00225"></a>00225 <span class="comment">!  do nb=1,nbMaxProc</span>
<a name="l00226"></a>00226 <span class="comment">!    write(logu,*) nb, toActivate(nb), toDeactivate(nb)</span>
<a name="l00227"></a>00227 <span class="comment">!  end do</span>
<a name="l00228"></a>00228 
<a name="l00229"></a>00229   <span class="comment">! Re-calculate number of local blocks</span>
<a name="l00230"></a>00230   <a class="code" href="namespaceglobals.html#afee5583d2e1fc7be2e32aa595c515ec5">nbLocal</a> = 0
<a name="l00231"></a>00231   <span class="keyword">do</span> nb=1,<a class="code" href="namespaceparameters.html#a2ff4da7d081da9191c0d66918bf6625b">nbMaxProc</a>
<a name="l00232"></a>00232     <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#adc845521f6ad2502bc19df43607224e0">localBlocks</a>(nb).ne.-1) <span class="keyword">then</span>
<a name="l00233"></a>00233       <a class="code" href="namespaceglobals.html#afee5583d2e1fc7be2e32aa595c515ec5">nbLocal</a> = <a class="code" href="namespaceglobals.html#afee5583d2e1fc7be2e32aa595c515ec5">nbLocal</a> + 1
<a name="l00234"></a>00234     <span class="keyword">end if</span>
<a name="l00235"></a>00235   <span class="keyword">end do</span>
<a name="l00236"></a>00236 <span class="comment">!  write(logu,*) &quot;I sent&quot;, sent, &quot;blocks and received&quot;, received, &quot;blocks&quot;</span>
<a name="l00237"></a>00237 <span class="comment">!  write(logu,&#39;(a,i3,a,i3)&#39;) &quot;I&#39;ve counted and have &quot;, nbLocal, &amp;</span>
<a name="l00238"></a>00238 <span class="comment">!    &quot; local blocks; I should have &quot;, tots(rank+1)</span>
<a name="l00239"></a>00239 
<a name="l00240"></a>00240   <span class="comment">! Report load balance results</span>
<a name="l00241"></a>00241   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a,i0,a,i0,a)&#39;</span>) <span class="stringliteral">&quot;Sent &quot;</span>, sent, <span class="stringliteral">&quot; blocks; received &quot;</span>, received, <span class="stringliteral">&quot; blocks&quot;</span>
<a name="l00242"></a>00242   <span class="keyword">write</span>(<a class="code" href="namespaceglobals.html#a5baaf3368c41942a3e5e48a39b97c2ce">logu</a>,<span class="stringliteral">&#39;(1x,a,i0,a)&#39;</span>) <span class="stringliteral">&quot;Now have &quot;</span>, <a class="code" href="namespaceglobals.html#afee5583d2e1fc7be2e32aa595c515ec5">nbLocal</a>, <span class="stringliteral">&quot; local blocks&quot;</span>
<a name="l00243"></a>00243 
<a name="l00244"></a>00244   <span class="comment">! Synchronize global block registry</span>
<a name="l00245"></a>00245   call <a class="code" href="admesh_8f90.html#a1b5b540f1a3ef74ebab213c629bd46ce">syncBlockLists </a>()
<a name="l00246"></a>00246 
<a name="l00247"></a>00247   <span class="comment">! DEBUG</span>
<a name="l00248"></a>00248 <span class="comment">!  write(logu,*) &quot;Local blocks after syncBlockLists:&quot;</span>
<a name="l00249"></a>00249 <span class="comment">!  do nb=1,nbMaxProc</span>
<a name="l00250"></a>00250 <span class="comment">!    if (localBlocks(nb).ne.-1) then</span>
<a name="l00251"></a>00251 <span class="comment">!      write(logu,*) nb, localBlocks(nb)</span>
<a name="l00252"></a>00252 <span class="comment">!    end if</span>
<a name="l00253"></a>00253 <span class="comment">!  end do</span>
<a name="l00254"></a>00254   
<a name="l00255"></a>00255 <span class="keyword">end subroutine doBalance</span>
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 <span class="comment">!===============================================================================</span>
<a name="l00258"></a>00258 <span class="comment"></span>
<a name="l00259"></a>00259 !&gt; @brief Returns a load-balancing ordered list of blocks
<a name="l00260"></a>00260 !&gt; @details The list is obtained by calculating the index of each block
<a name="l00261"></a>00261 !! along a Hilbert curve, and then sorting the block list using the indices
<a name="l00262"></a>00262 !&gt; @param loadOrder The load-balanced ordered list of bIDs
<a name="l00263"></a><a class="code" href="loadbalance_8f90.html#a2812997e51cdd892c6af392322fc8655">00263</a> <span class="keyword">subroutine </span><a class="code" href="loadbalance_8f90.html#a2812997e51cdd892c6af392322fc8655">HilbertOrder</a> (loadOrder)
<a name="l00264"></a>00264 
<a name="l00265"></a>00265   use <span class="keywordflow">parameters</span>
<a name="l00266"></a>00266   use <span class="keywordflow">globals</span>
<a name="l00267"></a>00267   <span class="keyword">implicit none</span>
<a name="l00268"></a>00268 
<a name="l00269"></a>00269   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: loadOrder(nbMaxGlobal)
<a name="l00270"></a>00270 
<a name="l00271"></a>00271   <span class="keywordtype">integer</span> :: nb, next, bID, x, y, z, xp, yp, zp, ilev, istat
<a name="l00272"></a>00272   <span class="keywordtype">double precision</span> :: hk
<a name="l00273"></a>00273   <span class="keywordtype">integer</span>, <span class="keywordtype">allocatable</span> :: blocks(:)
<a name="l00274"></a>00274   <span class="keywordtype">integer</span>, <span class="keywordtype">allocatable</span> :: keys(:)
<a name="l00275"></a>00275 
<a name="l00276"></a>00276   <span class="comment">! Re-calculate nbActive, declare blocks(:) and keys(:), and fill them</span>
<a name="l00277"></a>00277   <span class="comment">! with blocks and Hilbert Keys</span>
<a name="l00278"></a>00278 
<a name="l00279"></a>00279   <a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a> = 0
<a name="l00280"></a>00280   <span class="keyword">do</span> nb=1,nbMaxGlobal
<a name="l00281"></a>00281     <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb).ne.-1) <span class="keyword">then</span>
<a name="l00282"></a>00282       <a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a> = <a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a> + 1
<a name="l00283"></a>00283     <span class="keyword">end if</span>
<a name="l00284"></a>00284   <span class="keyword">end do</span>
<a name="l00285"></a>00285 
<a name="l00286"></a>00286   <span class="keyword">allocate</span>( blocks(<a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a>), stat=istat)
<a name="l00287"></a>00287   <span class="keyword">allocate</span>( keys(<a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a>), stat=istat)
<a name="l00288"></a>00288   blocks(:) = -1
<a name="l00289"></a>00289   keys(:) = -1
<a name="l00290"></a>00290 
<a name="l00291"></a>00291   <span class="comment">! Build lists of blocks with corresponding Hilbert indices as keys</span>
<a name="l00292"></a>00292   next = 1
<a name="l00293"></a>00293   <span class="keyword">do</span> nb=1,nbMaxGlobal
<a name="l00294"></a>00294     <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb).ne.-1) <span class="keyword">then</span>
<a name="l00295"></a>00295       <span class="comment">! Obtain this block&#39;s Hilbert key at the finest mesh level</span>
<a name="l00296"></a>00296       bID = <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb)
<a name="l00297"></a>00297       call <a class="code" href="loadbalance_8f90.html#a97694885a870ffa20811f2c8efa05dde">getHilbertKey</a>(bID, hk)
<a name="l00298"></a>00298       blocks(next) = bID
<a name="l00299"></a>00299       keys(next) = hk   <span class="comment">! Implicit conversion to integer here</span>
<a name="l00300"></a>00300       next = next + 1    
<a name="l00301"></a>00301     <span class="keyword">end if</span>
<a name="l00302"></a>00302   <span class="keyword">end do</span>
<a name="l00303"></a>00303 
<a name="l00304"></a>00304   <span class="comment">! Sort &#39;blocks&#39; list using &#39;keys&#39; through QuickSort</span>
<a name="l00305"></a>00305   call <a class="code" href="loadbalance_8f90.html#a1545668842e5572ee798b46d6a934230">QuickSort </a>(<a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a>, blocks, keys, 1, <a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a>)
<a name="l00306"></a>00306 
<a name="l00307"></a>00307   <span class="comment">! Fill loadOrder list with sorted blocks list</span>
<a name="l00308"></a>00308   loadOrder(:) = -1
<a name="l00309"></a>00309   <span class="keyword">do</span> nb=1,<a class="code" href="namespaceglobals.html#aea9a3f8b9aca242686487ccd26a299ba">nbActive</a>
<a name="l00310"></a>00310     loadOrder(nb) = blocks(nb)
<a name="l00311"></a>00311   <span class="keyword">end do</span>
<a name="l00312"></a>00312 
<a name="l00313"></a>00313   <span class="comment">! DEBUG</span>
<a name="l00314"></a>00314 <span class="comment">!  if (rank.eq.master) then</span>
<a name="l00315"></a>00315 <span class="comment">!    write(logu,*) &quot;Hilbert indexing:&quot;</span>
<a name="l00316"></a>00316 <span class="comment">!    do nb=1,nbActive</span>
<a name="l00317"></a>00317 <span class="comment">!      bID = loadOrder(nb)</span>
<a name="l00318"></a>00318 <span class="comment">!      call bcoords(bID, x, y, z)</span>
<a name="l00319"></a>00319 <span class="comment">!      write(logu,*) bID, x, y, z, keys(nb)</span>
<a name="l00320"></a>00320 <span class="comment">!    end do</span>
<a name="l00321"></a>00321 <span class="comment">!  end if</span>
<a name="l00322"></a>00322   <span class="comment">! DEBUG</span>
<a name="l00323"></a>00323   
<a name="l00324"></a>00324   <span class="comment">! Don&#39;t forget to deallocate these arrays :)</span>
<a name="l00325"></a>00325   <span class="keyword">deallocate</span> (blocks)
<a name="l00326"></a>00326   <span class="keyword">deallocate</span> (keys)
<a name="l00327"></a>00327 
<a name="l00328"></a>00328 <span class="keyword">end subroutine HilbertOrder</span>
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 <span class="comment">!===============================================================================</span>
<a name="l00331"></a>00331 <span class="comment"></span>
<a name="l00332"></a>00332 !&gt; @brief Returns a load-balancing ordered list of blocks (test routine)
<a name="l00333"></a>00333 !&gt; @details The list is obtained by order in the globalBlocks list
<a name="l00334"></a>00334 !&gt; @param loadOrder The load-balanced ordered list of bIDs
<a name="l00335"></a><a class="code" href="loadbalance_8f90.html#a637e61abc60ffd1594a2d55bcc6ed38c">00335</a> <span class="keyword">subroutine </span><a class="code" href="loadbalance_8f90.html#a637e61abc60ffd1594a2d55bcc6ed38c">NaiveOrder</a> (loadOrder)
<a name="l00336"></a>00336 
<a name="l00337"></a>00337   use <span class="keywordflow">parameters</span>
<a name="l00338"></a>00338   use <span class="keywordflow">globals</span>
<a name="l00339"></a>00339   <span class="keyword">implicit none</span>
<a name="l00340"></a>00340 
<a name="l00341"></a>00341   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: loadOrder(nbMaxGlobal)
<a name="l00342"></a>00342 
<a name="l00343"></a>00343   <span class="keywordtype">integer</span> :: nb, next
<a name="l00344"></a>00344 
<a name="l00345"></a>00345   loadOrder(:) = -1
<a name="l00346"></a>00346   next = 1
<a name="l00347"></a>00347   <span class="keyword">do</span> nb=1,nbMaxGlobal
<a name="l00348"></a>00348     <span class="keyword">if</span> (<a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb).ne.-1) <span class="keyword">then</span>
<a name="l00349"></a>00349       loadOrder(next) = <a class="code" href="namespaceglobals.html#ae1b47be87361ae69b73a7cdc15511687">globalBlocks</a>(nb)
<a name="l00350"></a>00350       next = next + 1
<a name="l00351"></a>00351     <span class="keyword">end if</span>
<a name="l00352"></a>00352   <span class="keyword">end do</span>
<a name="l00353"></a>00353 
<a name="l00354"></a>00354 <span class="keyword">end subroutine NaiveOrder</span>
<a name="l00355"></a>00355 
<a name="l00356"></a>00356 <span class="comment">!===============================================================================</span>
<a name="l00357"></a>00357 <span class="comment"></span>
<a name="l00358"></a>00358 !&gt; @brief Quicksorts a list using an auxiliary list of keys (in-place)
<a name="l00359"></a>00359 !&gt; @param l The size of the lists
<a name="l00360"></a>00360 !&gt; @param list The list of items to be sorted
<a name="l00361"></a>00361 !&gt; @param keys The list of keys used for the sort
<a name="l00362"></a>00362 !&gt; @param first The index of the first element to be sorted
<a name="l00363"></a>00363 !&gt; @param last The index of the last element to be sorted
<a name="l00364"></a><a class="code" href="loadbalance_8f90.html#a1545668842e5572ee798b46d6a934230">00364</a> <span class="keywordtype">recursive</span> <span class="keyword">subroutine </span><a class="code" href="loadbalance_8f90.html#a1545668842e5572ee798b46d6a934230">QuickSort</a> (l, list, keys, first, last)
<a name="l00365"></a>00365 
<a name="l00366"></a>00366   <span class="keyword">implicit none</span>
<a name="l00367"></a>00367   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: l
<a name="l00368"></a>00368   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(inout)</span> :: list(l)
<a name="l00369"></a>00369   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(inout)</span> :: keys(l)
<a name="l00370"></a>00370   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: first
<a name="l00371"></a>00371   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: last
<a name="l00372"></a>00372 
<a name="l00373"></a>00373   <span class="keywordtype">integer</span> :: pivotIndex, newPivotIndex
<a name="l00374"></a>00374 
<a name="l00375"></a>00375   <span class="comment">! Only do something if the lists have at least 2 elements</span>
<a name="l00376"></a>00376   <span class="keyword">if</span> (first.lt.last) <span class="keyword">then</span>
<a name="l00377"></a>00377 
<a name="l00378"></a>00378     <span class="comment">! Choose a pivot - middle item</span>
<a name="l00379"></a>00379     pivotIndex = first + (last-first+1)/2  <span class="comment">! Implicit conversion to integer</span>
<a name="l00380"></a>00380     
<a name="l00381"></a>00381     <span class="comment">! Partition lists in-place</span>
<a name="l00382"></a>00382     call <a class="code" href="loadbalance_8f90.html#a903abe3db07765480d975e4ed237dbe1">Partition </a>(l, list, keys, first, last, pivotIndex, newPivotIndex)
<a name="l00383"></a>00383 
<a name="l00384"></a>00384     <span class="comment">! Recursively sort each sublist</span>
<a name="l00385"></a>00385     call <a class="code" href="loadbalance_8f90.html#a1545668842e5572ee798b46d6a934230">QuickSort </a>(l, list, keys, first, newPivotIndex - 1)
<a name="l00386"></a>00386     call <a class="code" href="loadbalance_8f90.html#a1545668842e5572ee798b46d6a934230">QuickSort </a>(l, list, keys, newPivotIndex + 1, last)  
<a name="l00387"></a>00387 
<a name="l00388"></a>00388   <span class="keyword">end if</span>
<a name="l00389"></a>00389 
<a name="l00390"></a>00390 <span class="keyword">end subroutine QuickSort</span>
<a name="l00391"></a>00391 
<a name="l00392"></a>00392 <span class="comment">!===============================================================================</span>
<a name="l00393"></a>00393 <span class="comment"></span>
<a name="l00394"></a>00394 !&gt; @brief In-place auxiliary partition routine for QuickSort
<a name="l00395"></a>00395 !&gt; @param l The size of the lists
<a name="l00396"></a>00396 !&gt; @param list The list of items to be sorted
<a name="l00397"></a>00397 !&gt; @param keys The list of keys used for the sort
<a name="l00398"></a><a class="code" href="loadbalance_8f90.html#a903abe3db07765480d975e4ed237dbe1">00398</a> <span class="keyword">subroutine </span><a class="code" href="loadbalance_8f90.html#a903abe3db07765480d975e4ed237dbe1">Partition</a> (l, list, keys, first, last, pivotIndex, storeIndex)
<a name="l00399"></a>00399 
<a name="l00400"></a>00400   <span class="keyword">implicit none</span>
<a name="l00401"></a>00401   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: l
<a name="l00402"></a>00402   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(inout)</span> :: list(l)
<a name="l00403"></a>00403   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(inout)</span> :: keys(l)
<a name="l00404"></a>00404   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: first
<a name="l00405"></a>00405   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: last
<a name="l00406"></a>00406   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: pivotIndex
<a name="l00407"></a>00407   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(out)</span> :: storeIndex
<a name="l00408"></a>00408 
<a name="l00409"></a>00409   <span class="keywordtype">integer</span> :: pivotKey
<a name="l00410"></a>00410   <span class="keywordtype">integer</span> :: temp, i
<a name="l00411"></a>00411 
<a name="l00412"></a>00412   <span class="comment">! Get the pivot&#39;s key</span>
<a name="l00413"></a>00413   pivotKey = keys(pivotIndex)
<a name="l00414"></a>00414 
<a name="l00415"></a>00415   <span class="comment">! Swap pivot value/key with item in last position</span>
<a name="l00416"></a>00416   temp = list(last)
<a name="l00417"></a>00417   list(last) = list(pivotIndex)
<a name="l00418"></a>00418   list(pivotIndex) = temp
<a name="l00419"></a>00419   temp = keys(last)
<a name="l00420"></a>00420   keys(last) = keys(pivotIndex)
<a name="l00421"></a>00421   keys(pivotIndex) = temp
<a name="l00422"></a>00422 
<a name="l00423"></a>00423   <span class="comment">! Swap items to begginning if key smaller than pivot</span>
<a name="l00424"></a>00424   storeIndex = first
<a name="l00425"></a>00425   <span class="keyword">do</span> i=first,last-1
<a name="l00426"></a>00426     <span class="keyword">if</span> (keys(i).le.pivotKey) <span class="keyword">then</span>
<a name="l00427"></a>00427       temp = list(storeIndex)
<a name="l00428"></a>00428       list(storeIndex) = list(i)
<a name="l00429"></a>00429       list(i) = temp
<a name="l00430"></a>00430       temp = keys(storeIndex)
<a name="l00431"></a>00431       keys(storeIndex) = keys(i)
<a name="l00432"></a>00432       keys(i) = temp
<a name="l00433"></a>00433       storeIndex = storeIndex + 1
<a name="l00434"></a>00434     <span class="keyword">end if</span>
<a name="l00435"></a>00435   <span class="keyword">end do</span>
<a name="l00436"></a>00436 
<a name="l00437"></a>00437   <span class="comment">! Move pivot to its final position</span>
<a name="l00438"></a>00438   temp = list(last)
<a name="l00439"></a>00439   list(last) = list(storeIndex)
<a name="l00440"></a>00440   list(storeIndex) = temp
<a name="l00441"></a>00441   temp = keys(last)
<a name="l00442"></a>00442   keys(last) = keys(storeIndex)
<a name="l00443"></a>00443   keys(storeIndex) = temp
<a name="l00444"></a>00444 
<a name="l00445"></a>00445 <span class="keyword">end subroutine Partition</span>
<a name="l00446"></a>00446 
<a name="l00447"></a>00447 <span class="comment">!===============================================================================</span>
<a name="l00448"></a>00448 <span class="comment"></span>
<a name="l00449"></a>00449 !&gt; @brief Calculates the Hilbert Key of a bID at the finest mesh level
<a name="l00450"></a>00450 !&gt; @details If the block&#39;s level is not the finest, 
<a name="l00451"></a>00451 !&gt; @param bID The global ID of the block
<a name="l00452"></a>00452 !&gt; @param hk The block&#39;s Hilbert key
<a name="l00453"></a><a class="code" href="loadbalance_8f90.html#a97694885a870ffa20811f2c8efa05dde">00453</a> <span class="keyword">subroutine </span><a class="code" href="loadbalance_8f90.html#a97694885a870ffa20811f2c8efa05dde">getHilbertKey</a> (bID, hk)
<a name="l00454"></a>00454 
<a name="l00455"></a>00455   use <span class="keywordflow">parameters</span>
<a name="l00456"></a>00456   use <span class="keywordflow">globals</span>
<a name="l00457"></a>00457   <span class="keyword">implicit none</span>
<a name="l00458"></a>00458 
<a name="l00459"></a>00459   <span class="keywordtype">integer</span>, <span class="keywordtype">intent(in)</span> :: bID
<a name="l00460"></a>00460   <span class="keywordtype">double precision</span>, <span class="keywordtype">intent(out)</span> :: hk
<a name="l00461"></a>00461 
<a name="l00462"></a>00462   <span class="keywordtype">integer</span> :: maxnb, order, x, y, z, ilev, xp, yp, zp
<a name="l00463"></a>00463 
<a name="l00464"></a>00464   <span class="comment">! Determine from the base grid geometry the &quot;bounding cube&quot; for the</span>
<a name="l00465"></a>00465   <span class="comment">! Hilbert curve, and hence the order of the curve</span>
<a name="l00466"></a>00466   maxnb = max(<a class="code" href="namespaceglobals.html#a295174106a6216b803f676d41c98c655">nbx</a>(<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>), nby(<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>), nbz(<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>))
<a name="l00467"></a>00467   order = ceiling(log(1.0*maxnb)/log(2.0))
<a name="l00468"></a>00468 
<a name="l00469"></a>00469   <span class="comment">! Obtain the block&#39;s local coords (own mesh level) and convert</span>
<a name="l00470"></a>00470   <span class="comment">! them to coords at the finest mesh level</span>
<a name="l00471"></a>00471   call <a class="code" href="admesh_8f90.html#a5a9cc822a866dea3b26d2469be216d84">bcoords</a>(bID, x, y, z)
<a name="l00472"></a>00472   call <a class="code" href="admesh_8f90.html#a971d8fccc948f21cfb43c8b9dd2ade5a">meshlevel</a>(bID, ilev)
<a name="l00473"></a>00473   xp = (x-1)*2**(<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>-ilev) + 1
<a name="l00474"></a>00474   yp = (y-1)*2**(<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>-ilev) + 1
<a name="l00475"></a>00475   zp = (z-1)*2**(<a class="code" href="namespaceglobals.html#a05704552a4bcfee67afc52ad008c5a98">maxlev</a>-ilev) + 1
<a name="l00476"></a>00476 
<a name="l00477"></a>00477   <span class="comment">! Get the Hilbert Key from the subroutine in hilbert.f90</span>
<a name="l00478"></a>00478   hk = -1
<a name="l00479"></a>00479   call <a class="code" href="hilbert_8f90.html#a9e45718e345761a1fe328d8abdda9419">HKey3</a>(xp-1, yp-1, zp-1, order, hk)
<a name="l00480"></a>00480 
<a name="l00481"></a>00481 <span class="keyword">end subroutine getHilbertKey</span>
</pre></div></div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Variables</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address style="text-align: right;"><small>Generated on Thu Jun 7 13:53:13 2012 for Walicxe3D by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
